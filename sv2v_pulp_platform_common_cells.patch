diff --git a/hw/vendor/pulp_platform_common_cells/src/cdc_2phase.sv b/hw/vendor/pulp_platform_common_cells/src/cdc_2phase.sv
index e1a67b4..07a9a41 100644
--- a/hw/vendor/pulp_platform_common_cells/src/cdc_2phase.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/cdc_2phase.sv
@@ -57,9 +57,9 @@ module cdc_2phase #(
 );
 
   // Asynchronous handshake signals.
-  (* dont_touch = "true" *) logic async_req;
-  (* dont_touch = "true" *) logic async_ack;
-  (* dont_touch = "true" *) T async_data;
+  `ifndef SV2V  `endif logic async_req;
+  `ifndef SV2V  `endif logic async_ack;
+  `ifndef SV2V  `endif T async_data;
 
   // The sender in the source domain.
   cdc_2phase_src #(.T(T)) i_src (
@@ -102,9 +102,9 @@ module cdc_2phase_src #(
   output T     async_data_o
 );
 
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   logic req_src_q, ack_src_q, ack_q;
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   T data_src_q;
 
   // The req_src and data_src registers change when a new data item is accepted.
@@ -152,10 +152,14 @@ module cdc_2phase_dst #(
   input  T     async_data_i
 );
 
+`ifndef SV2V
   (* dont_touch = "true" *)
   (* async_reg = "true" *)
+`endif
   logic req_dst_q, req_q0, req_q1, ack_dst_q;
+`ifndef SV2V
   (* dont_touch = "true" *)
+`endif
   T data_dst_q;
 
   // The ack_dst register changes when a new data item is accepted.
diff --git a/hw/vendor/pulp_platform_common_cells/src/cdc_2phase_clearable.sv b/hw/vendor/pulp_platform_common_cells/src/cdc_2phase_clearable.sv
index 21b6ddd..4a4c6d0 100644
--- a/hw/vendor/pulp_platform_common_cells/src/cdc_2phase_clearable.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/cdc_2phase_clearable.sv
@@ -83,9 +83,9 @@ module cdc_2phase_clearable #(
   logic        s_dst_isolate_ack_q;
 
   // Asynchronous handshake signals between the CDCs
-  (* dont_touch = "true" *) logic async_req;
-  (* dont_touch = "true" *) logic async_ack;
-  (* dont_touch = "true" *) T async_data;
+  `ifndef SV2V (* dont_touch = "true" *) `endif logic async_req;
+  `ifndef SV2V (* dont_touch = "true" *) `endif logic async_ack;
+  `ifndef SV2V (* dont_touch = "true" *) `endif T async_data;
 
   if (CLEAR_ON_ASYNC_RESET) begin : gen_elaboration_assertion
     if (SYNC_STAGES < 3)
@@ -212,9 +212,9 @@ module cdc_2phase_src_clearable #(
   output T     async_data_o
 );
 
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   logic  req_src_d, req_src_q, ack_synced;
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   T data_src_d, data_src_q;
 
   // Synchronize the async ACK
@@ -286,10 +286,10 @@ module cdc_2phase_dst_clearable #(
   input  T     async_data_i
 );
 
-  (* dont_touch = "true" *)
-  (* async_reg = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
+  `ifndef SV2V (* async_reg = "true" *) `endif
  logic ack_dst_d, ack_dst_q, req_synced, req_synced_q1;
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   T data_dst_d, data_dst_q;
 
 
diff --git a/hw/vendor/pulp_platform_common_cells/src/cdc_4phase.sv b/hw/vendor/pulp_platform_common_cells/src/cdc_4phase.sv
index bd4c65a..cc7002f 100644
--- a/hw/vendor/pulp_platform_common_cells/src/cdc_4phase.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/cdc_4phase.sv
@@ -53,9 +53,9 @@ module cdc_4phase #(
 );
 
   // Asynchronous handshake signals.
-  (* dont_touch = "true" *) logic async_req;
-  (* dont_touch = "true" *) logic async_ack;
-  (* dont_touch = "true" *) T async_data;
+  `ifndef SV2V (* dont_touch = "true" *) `endif logic async_req;
+  `ifndef SV2V (* dont_touch = "true" *) `endif logic async_ack;
+  `ifndef SV2V (* dont_touch = "true" *) `endif T async_data;
 
   // The sender in the source domain.
   cdc_4phase_src #(
@@ -106,11 +106,11 @@ module cdc_4phase_src #(
   output T     async_data_o
 );
 
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   logic  req_src_d, req_src_q;
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   T data_src_d, data_src_q;
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   logic  ack_synced;
 
   typedef enum logic[1:0] {IDLE, WAIT_ACK_ASSERT, WAIT_ACK_DEASSERT} state_e;
@@ -217,9 +217,9 @@ module cdc_4phase_dst #(
   input  T     async_data_i
 );
 
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   logic  ack_dst_d, ack_dst_q;
-  (* dont_touch = "true" *)
+  `ifndef SV2V (* dont_touch = "true" *) `endif
   logic  req_synced;
 
   logic  data_valid;
diff --git a/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv b/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv
index c6fb4b6..26f8659 100644
--- a/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray.sv
@@ -97,8 +97,10 @@
 
 `include "common_cells/registers.svh"
 
+`ifndef SV2V
 (* no_ungroup *)
 (* no_boundary_optimization *)
+`endif
 module cdc_fifo_gray #(
   /// The width of the default logic type.
   parameter int unsigned WIDTH = 1,
@@ -135,10 +137,15 @@ module cdc_fifo_gray #(
     .src_data_i,
     .src_valid_i,
     .src_ready_o,
-
+`ifndef SV2V
     (* async *) .async_data_o ( async_data ),
     (* async *) .async_wptr_o ( async_wptr ),
     (* async *) .async_rptr_i ( async_rptr )
+`else
+    .async_data_o ( async_data ),
+    .async_wptr_o ( async_wptr ),
+    .async_rptr_i ( async_rptr )
+`endif
   );
 
   cdc_fifo_gray_dst #(
@@ -150,10 +157,15 @@ module cdc_fifo_gray #(
     .dst_data_o,
     .dst_valid_o,
     .dst_ready_i,
-
+`ifndef SV2V
     (* async *) .async_data_i ( async_data ),
     (* async *) .async_wptr_i ( async_wptr ),
     (* async *) .async_rptr_o ( async_rptr )
+`else
+    .async_data_i ( async_data ),
+    .async_wptr_i ( async_wptr ),
+    .async_rptr_o ( async_rptr )
+`endif
   );
 
   // Check the invariants.
@@ -166,9 +178,10 @@ module cdc_fifo_gray #(
 
 endmodule
 
-
+`ifndef SV2V
 (* no_ungroup *)
 (* no_boundary_optimization *)
+`endif
 module cdc_fifo_gray_src #(
   parameter type T = logic,
   parameter int LOG_DEPTH = 3,
@@ -224,9 +237,10 @@ module cdc_fifo_gray_src #(
 
 endmodule
 
-
+`ifndef SV2V
 (* no_ungroup *)
 (* no_boundary_optimization *)
+`endif
 module cdc_fifo_gray_dst #(
   parameter type T = logic,
   parameter int LOG_DEPTH = 3,
diff --git a/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray_clearable.sv b/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray_clearable.sv
index 6c83866..cffab14 100644
--- a/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray_clearable.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/cdc_fifo_gray_clearable.sv
@@ -97,8 +97,12 @@
 
 `include "common_cells/registers.svh"
 
+
+`ifndef SV2V
 (* no_ungroup *)
 (* no_boundary_optimization *)
+`endif
+
 module cdc_fifo_gray_clearable #(
   /// The width of the default logic type.
   parameter int unsigned WIDTH = 1,
@@ -177,10 +181,15 @@ module cdc_fifo_gray_clearable #(
     .src_data_i,
     .src_valid_i ( src_valid_i & !s_src_isolate_req ),
     .src_ready_o ( s_src_ready                      ),
-
+`ifndef SV2V
     (* async *) .async_data_o ( async_data ),
     (* async *) .async_wptr_o ( async_wptr ),
     (* async *) .async_rptr_i ( async_rptr )
+`else
+    .async_data_o ( async_data ),
+    .async_wptr_o ( async_wptr ),
+    .async_rptr_i ( async_rptr )
+`endif
   );
 
   assign src_ready_o = s_src_ready & !s_src_isolate_req;
@@ -196,10 +205,15 @@ module cdc_fifo_gray_clearable #(
     .dst_data_o,
     .dst_valid_o ( s_dst_valid                      ),
     .dst_ready_i ( dst_ready_i & !s_dst_isolate_req ),
-
+`ifndef SV2V
     (* async *) .async_data_i ( async_data ),
     (* async *) .async_wptr_i ( async_wptr ),
     (* async *) .async_rptr_o ( async_rptr )
+`else
+    .async_data_i ( async_data ),
+    .async_wptr_i ( async_wptr ),
+    .async_rptr_o ( async_rptr )
+`endif
   );
 
   assign dst_valid_o = s_dst_valid & !s_dst_isolate_req;
@@ -263,9 +277,10 @@ module cdc_fifo_gray_clearable #(
 
 endmodule
 
-
+`ifndef SV2V
 (* no_ungroup *)
 (* no_boundary_optimization *)
+`endif
 module cdc_fifo_gray_src_clearable #(
   parameter type T = logic,
   parameter int LOG_DEPTH = 3,
@@ -323,8 +338,10 @@ module cdc_fifo_gray_src_clearable #(
 endmodule
 
 
+`ifndef SV2V
 (* no_ungroup *)
 (* no_boundary_optimization *)
+`endif
 module cdc_fifo_gray_dst_clearable #(
   parameter type T = logic,
   parameter int LOG_DEPTH = 3,
diff --git a/hw/vendor/pulp_platform_common_cells/src/cdc_reset_ctrlr.sv b/hw/vendor/pulp_platform_common_cells/src/cdc_reset_ctrlr.sv
index 94a63cd..13640a5 100644
--- a/hw/vendor/pulp_platform_common_cells/src/cdc_reset_ctrlr.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/cdc_reset_ctrlr.sv
@@ -135,13 +135,21 @@ module cdc_reset_ctrlr
   input logic  b_isolate_ack_i
 );
 
+`ifndef SV2V
   (* dont_touch = "true" *)
   logic        async_a2b_req, async_b2a_ack;
+`endif
+`ifndef SV2V
   (* dont_touch = "true" *)
+`endif
   clear_seq_phase_e async_a2b_next_phase;
+`ifndef SV2V
   (* dont_touch = "true" *)
+`endif
   logic        async_b2a_req, async_a2b_ack;
+`ifndef SV2V
   (* dont_touch = "true" *)
+`endif
   clear_seq_phase_e async_b2a_next_phase;
 
   cdc_reset_ctrlr_half #(
@@ -155,12 +163,21 @@ module cdc_reset_ctrlr
     .clear_ack_i        ( a_clear_ack_i        ),
     .isolate_o          ( a_isolate_o          ),
     .isolate_ack_i      ( a_isolate_ack_i      ),
+`ifndef SV2V
     (* async *) .async_next_phase_o ( async_a2b_next_phase ),
     (* async *) .async_req_o        ( async_a2b_req        ),
     (* async *) .async_ack_i        ( async_b2a_ack        ),
     (* async *) .async_next_phase_i ( async_b2a_next_phase ),
     (* async *) .async_req_i        ( async_b2a_req        ),
     (* async *) .async_ack_o        ( async_a2b_ack        )
+`else
+    .async_next_phase_o ( async_a2b_next_phase ),
+    .async_req_o        ( async_a2b_req        ),
+    .async_ack_i        ( async_b2a_ack        ),
+    .async_next_phase_i ( async_b2a_next_phase ),
+    .async_req_i        ( async_b2a_req        ),
+    .async_ack_o        ( async_a2b_ack        )
+`endif
   );
 
     cdc_reset_ctrlr_half #(
@@ -174,12 +191,21 @@ module cdc_reset_ctrlr
     .clear_ack_i        ( b_clear_ack_i        ),
     .isolate_o          ( b_isolate_o          ),
     .isolate_ack_i      ( b_isolate_ack_i      ),
+`ifndef SV2V
     (* async *) .async_next_phase_o ( async_b2a_next_phase ),
     (* async *) .async_req_o        ( async_b2a_req        ),
     (* async *) .async_ack_i        ( async_a2b_ack        ),
     (* async *) .async_next_phase_i ( async_a2b_next_phase ),
     (* async *) .async_req_i        ( async_a2b_req        ),
     (* async *) .async_ack_o        ( async_b2a_ack        )
+`else
+    .async_next_phase_o ( async_b2a_next_phase ),
+    .async_req_o        ( async_b2a_req        ),
+    .async_ack_i        ( async_a2b_ack        ),
+    .async_next_phase_i ( async_a2b_next_phase ),
+    .async_req_i        ( async_a2b_req        ),
+    .async_ack_o        ( async_b2a_ack        )
+`endif
   );
 endmodule
 
diff --git a/hw/vendor/pulp_platform_common_cells/src/id_queue.sv b/hw/vendor/pulp_platform_common_cells/src/id_queue.sv
index 2ba347e..4b562da 100644
--- a/hw/vendor/pulp_platform_common_cells/src/id_queue.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/id_queue.sv
@@ -49,6 +49,6 @@ module id_queue #(
     parameter int ID_WIDTH  = 0,
     parameter int CAPACITY  = 0,
     parameter bit FULL_BW   = 0,
-    parameter type data_t   = logic,
+    parameter type data_t   = logic[31:0],
     // Dependent parameters, DO NOT OVERRIDE!
     localparam type id_t    = logic[ID_WIDTH-1:0]
diff --git a/hw/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv b/hw/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv
index 90301c8..00b0e8b 100644
--- a/hw/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv
@@ -112,10 +112,12 @@ module rr_arb_tree #(
   // pragma translate_off
   `ifndef VERILATOR
   `ifndef XSIM
+  `ifndef SV2V
   // Default SVA reset
   default disable iff (!rst_ni || flush_i);
   `endif
   `endif
+  `endif
   // pragma translate_on
 
   // just pass through in this corner case
diff --git a/hw/vendor/pulp_platform_common_cells/src/stream_omega_net.sv b/hw/vendor/pulp_platform_common_cells/src/stream_omega_net.sv
index ad8e11d..c8d2641 100644
--- a/hw/vendor/pulp_platform_common_cells/src/stream_omega_net.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/stream_omega_net.sv
@@ -262,6 +262,7 @@ module stream_omega_net #(
     // Make sure that the handshake and payload is stable
     // pragma translate_off
     `ifndef VERILATOR
+    `ifndef SV2V
     default disable iff rst_ni;
     for (genvar i = 0; unsigned'(i) < NumInp; i++) begin : gen_sel_assertions
       assert property (@(posedge clk_i) (valid_i[i] |-> sel_i[i] < sel_oup_t'(NumOut))) else
@@ -296,6 +297,7 @@ module stream_omega_net #(
           $fatal(1, "Bit slicing of the internal selection signal is broken.");
     end
     `endif
+    `endif
     // pragma translate_on
   end
 endmodule
diff --git a/hw/vendor/pulp_platform_common_cells/src/stream_xbar.sv b/hw/vendor/pulp_platform_common_cells/src/stream_xbar.sv
index 9574006..4bd2586 100644
--- a/hw/vendor/pulp_platform_common_cells/src/stream_xbar.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/stream_xbar.sv
@@ -164,6 +164,7 @@ module stream_xbar #(
   // Make sure that the handshake and payload is stable
   // pragma translate_off
   `ifndef VERILATOR
+  `ifndef SV2V
   default disable iff rst_ni;
   for (genvar i = 0; unsigned'(i) < NumInp; i++) begin : gen_sel_assertions
     assert property (@(posedge clk_i) (valid_i[i] |-> sel_i[i] < sel_oup_t'(NumOut))) else
@@ -194,5 +195,6 @@ module stream_xbar #(
     assert (NumOut > 32'd0) else $fatal(1, "NumOut has to be > 0!");
   end
   `endif
+  `endif
   // pragma translate_on
 endmodule
diff --git a/hw/vendor/pulp_platform_common_cells/src/sync.sv b/hw/vendor/pulp_platform_common_cells/src/sync.sv
index b7bb781..9a39388 100644
--- a/hw/vendor/pulp_platform_common_cells/src/sync.sv
+++ b/hw/vendor/pulp_platform_common_cells/src/sync.sv
@@ -19,9 +19,10 @@ module sync #(
     input  logic serial_i,
     output logic serial_o
 );
-
+`ifndef SV2V
    (* dont_touch = "true" *)
    (* async_reg = "true" *)
+`endif
    logic [STAGES-1:0] reg_q;
 
     always_ff @(posedge clk_i, negedge rst_ni) begin
