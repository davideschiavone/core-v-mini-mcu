import hjson
import structs_gen

# Path to the header_structs template
template_path = "./sw/device/lib/drivers/template.tpl"

# hjson file from which the peripherals info are taken
m2s_dma_cfg_file = "./m2s_dma_cfg.hjson"

# path in which the structs header files are generated, has to be formatted with
# the name of the peripheral
out_file_path = "./sw/device/lib/drivers/dma/dma_structs.h" 

# dma regtool hjson file
dma_hjson_file = "./hw/ip/dma/data/dma.hjson"

def format_dma_channels(file_path, new_string):
    
    try:
        # Read the contents of the file
        with open(file_path, 'r') as file:
            content = file.read()
        
        # Replace 'DMA_START_ADDRESS' with 'new_address'
        updated_content = content.replace('#define dma_peri ((volatile dma *) DMA_START_ADDRESS)', new_string)
        
        # Write the updated content back to the file
        with open(file_path, 'w') as file:
            file.write(updated_content)
        
        print("DMA channel has been successfully updated.")
        
    except FileNotFoundError:
        print(f"The file {file_path} does not exist.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

# License header
license = ("/*\n"
" * Copyright 2024 EPFL\n"
" * Solderpad Hardware License, Version 2.1, see LICENSE.md for details.\n"
" * SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1\n"
" *\n"
" * Author: Tommaso Terzano <tommaso.terzano@epfl.ch>\n"
" *  \n"
" * Info: \n"
" *     This header is generated by struct_dma_gen.py, it's used to automatically include any generated dma_ch#_structs.h\n"
"*/\n\n")

if __name__ == "__main__":

    # Open the json file adn takes the data
    with open(m2s_dma_cfg_file) as f:
        data = hjson.load(f)
    
    channels = data["dma_channels"]

    for ch in channels:
        print(out_file_path.format(ch))
        structs_gen.main([ "--template_filename", template_path,
                        "--json_filename", dma_hjson_file, 
                        "--output_filename", out_file_path.format(ch)])
        
    new_string = f"#define DMA_START_ADDRESS(channel)                   \\ \n(                                                    \\ \n"
    index = 0
    for ch in channels:
        if(index != len(channels) - 1):
            new_string += (f"\t\t(channel) == {index} ? M2S_DMA_CH{index}_START_ADDRESS :     \\ \n")
        index += 1
    new_string += (f"\t\tM2S_DMA_CH{index - 1}_START_ADDRESS                        \\\n)                                                    \\ \n")

    new_string += "\n#define dma_peri(channel) ((volatile dma *) DMA_START_ADDRESS(channel))\n"

    format_dma_channels(out_file_path, new_string)
