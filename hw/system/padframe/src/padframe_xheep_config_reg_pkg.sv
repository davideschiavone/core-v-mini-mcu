// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package padframe_xheep_config_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {logic [15:0] q;} hw_version;
    struct packed {logic [15:0] q;} padcount;
  } padframe_xheep_config_reg2hw_info_reg_t;

  typedef struct packed {
    struct packed {logic q;} chip2pad;
    struct packed {logic q;} output_en;
  } padframe_xheep_config_reg2hw_pad_io_30_cfg_reg_t;

  typedef struct packed {logic [1:0] q;} padframe_xheep_config_reg2hw_pad_io_30_mux_sel_reg_t;

  typedef struct packed {
    struct packed {logic q;} chip2pad;
    struct packed {logic q;} output_en;
  } padframe_xheep_config_reg2hw_pad_io_31_cfg_reg_t;

  typedef struct packed {logic [1:0] q;} padframe_xheep_config_reg2hw_pad_io_31_mux_sel_reg_t;

  // Register -> HW type
  typedef struct packed {
    padframe_xheep_config_reg2hw_info_reg_t info;  // [39:8]
    padframe_xheep_config_reg2hw_pad_io_30_cfg_reg_t pad_io_30_cfg;  // [7:6]
    padframe_xheep_config_reg2hw_pad_io_30_mux_sel_reg_t pad_io_30_mux_sel;  // [5:4]
    padframe_xheep_config_reg2hw_pad_io_31_cfg_reg_t pad_io_31_cfg;  // [3:2]
    padframe_xheep_config_reg2hw_pad_io_31_mux_sel_reg_t pad_io_31_mux_sel;  // [1:0]
  } padframe_xheep_config_reg2hw_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PADFRAME_XHEEP_CONFIG_INFO_OFFSET = 5'h0;
  parameter logic [BlockAw-1:0] PADFRAME_XHEEP_CONFIG_PAD_IO_30_CFG_OFFSET = 5'h4;
  parameter logic [BlockAw-1:0] PADFRAME_XHEEP_CONFIG_PAD_IO_30_MUX_SEL_OFFSET = 5'h8;
  parameter logic [BlockAw-1:0] PADFRAME_XHEEP_CONFIG_PAD_IO_31_CFG_OFFSET = 5'hc;
  parameter logic [BlockAw-1:0] PADFRAME_XHEEP_CONFIG_PAD_IO_31_MUX_SEL_OFFSET = 5'h10;

  // Register index
  typedef enum int {
    PADFRAME_XHEEP_CONFIG_INFO,
    PADFRAME_XHEEP_CONFIG_PAD_IO_30_CFG,
    PADFRAME_XHEEP_CONFIG_PAD_IO_30_MUX_SEL,
    PADFRAME_XHEEP_CONFIG_PAD_IO_31_CFG,
    PADFRAME_XHEEP_CONFIG_PAD_IO_31_MUX_SEL
  } padframe_xheep_config_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PADFRAME_XHEEP_CONFIG_PERMIT[5] = '{
      4'b1111,  // index[0] PADFRAME_XHEEP_CONFIG_INFO
      4'b0001,  // index[1] PADFRAME_XHEEP_CONFIG_PAD_IO_30_CFG
      4'b0001,  // index[2] PADFRAME_XHEEP_CONFIG_PAD_IO_30_MUX_SEL
      4'b0001,  // index[3] PADFRAME_XHEEP_CONFIG_PAD_IO_31_CFG
      4'b0001  // index[4] PADFRAME_XHEEP_CONFIG_PAD_IO_31_MUX_SEL
  };

endpackage

