// File auto-generated by Padrick 0.3.1.post0.dev2+ge09286c
module padframe
  import pkg_padframe::*;
#(
    parameter int unsigned AW = 32,
    parameter int unsigned DW = 32,
    parameter type req_t = logic,  // reg_interface request type
    parameter type resp_t = logic,  // reg_interface response type
    parameter logic [DW-1:0] DecodeErrRespData = 32'hdeadda7a
) (
    input  logic                               clk_i,
    input  logic                               rst_ni,
    output static_connection_signals_pad2soc_t static_connection_signals_pad2soc,
    input  static_connection_signals_soc2pad_t static_connection_signals_soc2pad,
    output port_signals_pad2soc_t              port_signals_pad2soc,
    input  port_signals_soc2pad_t              port_signals_soc2pad,
    // Landing Pads
    inout  wire logic                          pad_xheep_pad_clk_pad,
    inout  wire logic                          pad_xheep_pad_rst_pad,
    inout  wire logic                          pad_xheep_pad_boot_select_pad,
    inout  wire logic                          pad_xheep_pad_execute_from_flash_pad,
    inout  wire logic                          pad_xheep_pad_jtag_tck_pad,
    inout  wire logic                          pad_xheep_pad_jtag_tms_pad,
    inout  wire logic                          pad_xheep_pad_jtag_trst_pad,
    inout  wire logic                          pad_xheep_pad_jtag_tdi_pad,
    inout  wire logic                          pad_xheep_pad_jtag_tdo_pad,
    inout  wire logic                          pad_xheep_pad_exit_valid_pad,
    inout  wire logic                          pad_xheep_pad_uart_rx_pad,
    inout  wire logic                          pad_xheep_pad_uart_tx_pad,
    inout  wire logic                          pad_xheep_pad_gpio_00_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_01_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_02_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_03_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_04_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_05_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_06_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_07_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_08_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_09_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_10_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_11_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_12_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_13_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_14_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_15_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_16_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_17_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_18_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_19_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_20_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_21_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_22_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_23_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_24_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_25_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_26_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_27_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_28_i_pad,
    inout  wire logic                          pad_xheep_pad_gpio_29_i_pad,
    inout  wire logic                          pad_xheep_pad_spi_flash_sck_pad,
    inout  wire logic                          pad_xheep_pad_spi_flash_cs_00_pad,
    inout  wire logic                          pad_xheep_pad_spi_flash_cs_01_pad,
    inout  wire logic                          pad_xheep_pad_spi_flash_sd_00_pad,
    inout  wire logic                          pad_xheep_pad_spi_flash_sd_01_pad,
    inout  wire logic                          pad_xheep_pad_spi_flash_sd_02_pad,
    inout  wire logic                          pad_xheep_pad_spi_flash_sd_03_pad,
    inout  wire logic                          pad_xheep_pad_spi_sck_pad,
    inout  wire logic                          pad_xheep_pad_spi_cs_00_pad,
    inout  wire logic                          pad_xheep_pad_spi_cs_01_pad,
    inout  wire logic                          pad_xheep_pad_spi_sd_00_pad,
    inout  wire logic                          pad_xheep_pad_spi_sd_01_pad,
    inout  wire logic                          pad_xheep_pad_spi_sd_02_pad,
    inout  wire logic                          pad_xheep_pad_spi_sd_03_pad,
    inout  wire logic                          pad_xheep_pad_io_30_pad,
    inout  wire logic                          pad_xheep_pad_io_31_pad,
    // Config Interface
    input  req_t                               config_req_i,
    output resp_t                              config_rsp_o
);


  req_t  xheep_config_req;
  resp_t xheep_config_resp;
  padframe_xheep #(
      .req_t (req_t),
      .resp_t(resp_t)
  ) i_xheep (
      .clk_i,
      .rst_ni,
      .static_connection_signals_pad2soc(static_connection_signals_pad2soc.xheep),
      .static_connection_signals_soc2pad(static_connection_signals_soc2pad.xheep),
      .port_signals_pad2soc_o(port_signals_pad2soc.xheep),
      .port_signals_soc2pad_i(port_signals_soc2pad.xheep),
      .pad_pad_clk_pad(pad_xheep_pad_clk_pad),
      .pad_pad_rst_pad(pad_xheep_pad_rst_pad),
      .pad_pad_boot_select_pad(pad_xheep_pad_boot_select_pad),
      .pad_pad_execute_from_flash_pad(pad_xheep_pad_execute_from_flash_pad),
      .pad_pad_jtag_tck_pad(pad_xheep_pad_jtag_tck_pad),
      .pad_pad_jtag_tms_pad(pad_xheep_pad_jtag_tms_pad),
      .pad_pad_jtag_trst_pad(pad_xheep_pad_jtag_trst_pad),
      .pad_pad_jtag_tdi_pad(pad_xheep_pad_jtag_tdi_pad),
      .pad_pad_jtag_tdo_pad(pad_xheep_pad_jtag_tdo_pad),
      .pad_pad_exit_valid_pad(pad_xheep_pad_exit_valid_pad),
      .pad_pad_uart_rx_pad(pad_xheep_pad_uart_rx_pad),
      .pad_pad_uart_tx_pad(pad_xheep_pad_uart_tx_pad),
      .pad_pad_gpio_00_i_pad(pad_xheep_pad_gpio_00_i_pad),
      .pad_pad_gpio_01_i_pad(pad_xheep_pad_gpio_01_i_pad),
      .pad_pad_gpio_02_i_pad(pad_xheep_pad_gpio_02_i_pad),
      .pad_pad_gpio_03_i_pad(pad_xheep_pad_gpio_03_i_pad),
      .pad_pad_gpio_04_i_pad(pad_xheep_pad_gpio_04_i_pad),
      .pad_pad_gpio_05_i_pad(pad_xheep_pad_gpio_05_i_pad),
      .pad_pad_gpio_06_i_pad(pad_xheep_pad_gpio_06_i_pad),
      .pad_pad_gpio_07_i_pad(pad_xheep_pad_gpio_07_i_pad),
      .pad_pad_gpio_08_i_pad(pad_xheep_pad_gpio_08_i_pad),
      .pad_pad_gpio_09_i_pad(pad_xheep_pad_gpio_09_i_pad),
      .pad_pad_gpio_10_i_pad(pad_xheep_pad_gpio_10_i_pad),
      .pad_pad_gpio_11_i_pad(pad_xheep_pad_gpio_11_i_pad),
      .pad_pad_gpio_12_i_pad(pad_xheep_pad_gpio_12_i_pad),
      .pad_pad_gpio_13_i_pad(pad_xheep_pad_gpio_13_i_pad),
      .pad_pad_gpio_14_i_pad(pad_xheep_pad_gpio_14_i_pad),
      .pad_pad_gpio_15_i_pad(pad_xheep_pad_gpio_15_i_pad),
      .pad_pad_gpio_16_i_pad(pad_xheep_pad_gpio_16_i_pad),
      .pad_pad_gpio_17_i_pad(pad_xheep_pad_gpio_17_i_pad),
      .pad_pad_gpio_18_i_pad(pad_xheep_pad_gpio_18_i_pad),
      .pad_pad_gpio_19_i_pad(pad_xheep_pad_gpio_19_i_pad),
      .pad_pad_gpio_20_i_pad(pad_xheep_pad_gpio_20_i_pad),
      .pad_pad_gpio_21_i_pad(pad_xheep_pad_gpio_21_i_pad),
      .pad_pad_gpio_22_i_pad(pad_xheep_pad_gpio_22_i_pad),
      .pad_pad_gpio_23_i_pad(pad_xheep_pad_gpio_23_i_pad),
      .pad_pad_gpio_24_i_pad(pad_xheep_pad_gpio_24_i_pad),
      .pad_pad_gpio_25_i_pad(pad_xheep_pad_gpio_25_i_pad),
      .pad_pad_gpio_26_i_pad(pad_xheep_pad_gpio_26_i_pad),
      .pad_pad_gpio_27_i_pad(pad_xheep_pad_gpio_27_i_pad),
      .pad_pad_gpio_28_i_pad(pad_xheep_pad_gpio_28_i_pad),
      .pad_pad_gpio_29_i_pad(pad_xheep_pad_gpio_29_i_pad),
      .pad_pad_spi_flash_sck_pad(pad_xheep_pad_spi_flash_sck_pad),
      .pad_pad_spi_flash_cs_00_pad(pad_xheep_pad_spi_flash_cs_00_pad),
      .pad_pad_spi_flash_cs_01_pad(pad_xheep_pad_spi_flash_cs_01_pad),
      .pad_pad_spi_flash_sd_00_pad(pad_xheep_pad_spi_flash_sd_00_pad),
      .pad_pad_spi_flash_sd_01_pad(pad_xheep_pad_spi_flash_sd_01_pad),
      .pad_pad_spi_flash_sd_02_pad(pad_xheep_pad_spi_flash_sd_02_pad),
      .pad_pad_spi_flash_sd_03_pad(pad_xheep_pad_spi_flash_sd_03_pad),
      .pad_pad_spi_sck_pad(pad_xheep_pad_spi_sck_pad),
      .pad_pad_spi_cs_00_pad(pad_xheep_pad_spi_cs_00_pad),
      .pad_pad_spi_cs_01_pad(pad_xheep_pad_spi_cs_01_pad),
      .pad_pad_spi_sd_00_pad(pad_xheep_pad_spi_sd_00_pad),
      .pad_pad_spi_sd_01_pad(pad_xheep_pad_spi_sd_01_pad),
      .pad_pad_spi_sd_02_pad(pad_xheep_pad_spi_sd_02_pad),
      .pad_pad_spi_sd_03_pad(pad_xheep_pad_spi_sd_03_pad),
      .pad_pad_io_30_pad(pad_xheep_pad_io_30_pad),
      .pad_pad_io_31_pad(pad_xheep_pad_io_31_pad),
      .config_req_i(xheep_config_req),
      .config_rsp_o(xheep_config_resp)
  );


  localparam int unsigned NUM_PAD_DOMAINS = 1;
  localparam int unsigned REG_ADDR_WIDTH = 5;
  typedef struct packed {
    int unsigned idx;
    logic [REG_ADDR_WIDTH-1:0] start_addr;
    logic [REG_ADDR_WIDTH-1:0] end_addr;
  } addr_rule_t;

  localparam addr_rule_t [NUM_PAD_DOMAINS-1:0] ADDR_DEMUX_RULES = '{
      '{idx: 0, start_addr: 5'd0, end_addr: 5'd20}
  };
  logic [$clog2(
NUM_PAD_DOMAINS+1
)-1:0] pad_domain_sel;  // +1 since there is an additional error slave
  addr_decode #(
      .NoIndices(NUM_PAD_DOMAINS + 1),
      .NoRules(NUM_PAD_DOMAINS),
      .addr_t(logic [REG_ADDR_WIDTH-1:0]),
      .rule_t(addr_rule_t)
  ) i_addr_decode (
      .addr_i(config_req_i.addr[REG_ADDR_WIDTH-1:0]),
      .addr_map_i(ADDR_DEMUX_RULES),
      .dec_valid_o(),
      .dec_error_o(),
      .idx_o(pad_domain_sel),
      .en_default_idx_i(1'b1),
      .default_idx_i(1'd1)  // The last entry is the error slave
  );

  req_t  error_slave_req;
  resp_t error_slave_rsp;

  // Config Interface demultiplexing
  reg_demux #(
      .NoPorts(NUM_PAD_DOMAINS + 1),  //+1 for the error slave
      .req_t  (req_t),
      .rsp_t  (resp_t)
  ) i_config_demuxer (
      .clk_i,
      .rst_ni,
      .in_select_i(pad_domain_sel),
      .in_req_i(config_req_i),
      .in_rsp_o(config_rsp_o),
      .out_req_o({error_slave_req, xheep_config_req}),
      .out_rsp_i({error_slave_rsp, xheep_config_resp})
  );

  assign error_slave_rsp.error = 1'b1;
  assign error_slave_rsp.rdata = DecodeErrRespData;
  assign error_slave_rsp.ready = 1'b1;

endmodule
