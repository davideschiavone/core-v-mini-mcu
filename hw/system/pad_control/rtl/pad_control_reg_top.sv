// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module pad_control_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
    input clk_i,
    input rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output pad_control_reg_pkg::pad_control_reg2hw_t reg2hw,  // Write


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import pad_control_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [3:0] pad_mux_uart_rx_qs;
  logic [3:0] pad_mux_uart_rx_wd;
  logic pad_mux_uart_rx_we;
  logic [3:0] pad_mux_uart_tx_qs;
  logic [3:0] pad_mux_uart_tx_wd;
  logic pad_mux_uart_tx_we;
  logic [3:0] pad_mux_exit_valid_qs;
  logic [3:0] pad_mux_exit_valid_wd;
  logic pad_mux_exit_valid_we;
  logic [3:0] pad_mux_i2c_scl_qs;
  logic [3:0] pad_mux_i2c_scl_wd;
  logic pad_mux_i2c_scl_we;
  logic [3:0] pad_mux_i2c_sda_qs;
  logic [3:0] pad_mux_i2c_sda_wd;
  logic pad_mux_i2c_sda_we;
  logic [7:0] pad_attribute_clk_qs;
  logic [7:0] pad_attribute_clk_wd;
  logic pad_attribute_clk_we;
  logic [7:0] pad_attribute_rst_qs;
  logic [7:0] pad_attribute_rst_wd;
  logic pad_attribute_rst_we;
  logic [7:0] pad_attribute_boot_select_qs;
  logic [7:0] pad_attribute_boot_select_wd;
  logic pad_attribute_boot_select_we;
  logic [7:0] pad_attribute_execute_from_flash_qs;
  logic [7:0] pad_attribute_execute_from_flash_wd;
  logic pad_attribute_execute_from_flash_we;
  logic [7:0] pad_attribute_jtag_tck_qs;
  logic [7:0] pad_attribute_jtag_tck_wd;
  logic pad_attribute_jtag_tck_we;
  logic [7:0] pad_attribute_jtag_tms_qs;
  logic [7:0] pad_attribute_jtag_tms_wd;
  logic pad_attribute_jtag_tms_we;
  logic [7:0] pad_attribute_jtag_trst_qs;
  logic [7:0] pad_attribute_jtag_trst_wd;
  logic pad_attribute_jtag_trst_we;
  logic [7:0] pad_attribute_jtag_tdi_qs;
  logic [7:0] pad_attribute_jtag_tdi_wd;
  logic pad_attribute_jtag_tdi_we;
  logic [7:0] pad_attribute_jtag_tdo_qs;
  logic [7:0] pad_attribute_jtag_tdo_wd;
  logic pad_attribute_jtag_tdo_we;
  logic [7:0] pad_attribute_uart_rx_qs;
  logic [7:0] pad_attribute_uart_rx_wd;
  logic pad_attribute_uart_rx_we;
  logic [7:0] pad_attribute_uart_tx_qs;
  logic [7:0] pad_attribute_uart_tx_wd;
  logic pad_attribute_uart_tx_we;
  logic [7:0] pad_attribute_exit_valid_qs;
  logic [7:0] pad_attribute_exit_valid_wd;
  logic pad_attribute_exit_valid_we;
  logic [7:0] pad_attribute_gpio_0_qs;
  logic [7:0] pad_attribute_gpio_0_wd;
  logic pad_attribute_gpio_0_we;
  logic [7:0] pad_attribute_gpio_1_qs;
  logic [7:0] pad_attribute_gpio_1_wd;
  logic pad_attribute_gpio_1_we;
  logic [7:0] pad_attribute_gpio_2_qs;
  logic [7:0] pad_attribute_gpio_2_wd;
  logic pad_attribute_gpio_2_we;
  logic [7:0] pad_attribute_gpio_3_qs;
  logic [7:0] pad_attribute_gpio_3_wd;
  logic pad_attribute_gpio_3_we;
  logic [7:0] pad_attribute_gpio_4_qs;
  logic [7:0] pad_attribute_gpio_4_wd;
  logic pad_attribute_gpio_4_we;
  logic [7:0] pad_attribute_gpio_5_qs;
  logic [7:0] pad_attribute_gpio_5_wd;
  logic pad_attribute_gpio_5_we;
  logic [7:0] pad_attribute_gpio_6_qs;
  logic [7:0] pad_attribute_gpio_6_wd;
  logic pad_attribute_gpio_6_we;
  logic [7:0] pad_attribute_gpio_7_qs;
  logic [7:0] pad_attribute_gpio_7_wd;
  logic pad_attribute_gpio_7_we;
  logic [7:0] pad_attribute_gpio_8_qs;
  logic [7:0] pad_attribute_gpio_8_wd;
  logic pad_attribute_gpio_8_we;
  logic [7:0] pad_attribute_gpio_9_qs;
  logic [7:0] pad_attribute_gpio_9_wd;
  logic pad_attribute_gpio_9_we;
  logic [7:0] pad_attribute_gpio_10_qs;
  logic [7:0] pad_attribute_gpio_10_wd;
  logic pad_attribute_gpio_10_we;
  logic [7:0] pad_attribute_gpio_11_qs;
  logic [7:0] pad_attribute_gpio_11_wd;
  logic pad_attribute_gpio_11_we;
  logic [7:0] pad_attribute_gpio_12_qs;
  logic [7:0] pad_attribute_gpio_12_wd;
  logic pad_attribute_gpio_12_we;
  logic [7:0] pad_attribute_gpio_13_qs;
  logic [7:0] pad_attribute_gpio_13_wd;
  logic pad_attribute_gpio_13_we;
  logic [7:0] pad_attribute_gpio_14_qs;
  logic [7:0] pad_attribute_gpio_14_wd;
  logic pad_attribute_gpio_14_we;
  logic [7:0] pad_attribute_gpio_15_qs;
  logic [7:0] pad_attribute_gpio_15_wd;
  logic pad_attribute_gpio_15_we;
  logic [7:0] pad_attribute_gpio_16_qs;
  logic [7:0] pad_attribute_gpio_16_wd;
  logic pad_attribute_gpio_16_we;
  logic [7:0] pad_attribute_gpio_17_qs;
  logic [7:0] pad_attribute_gpio_17_wd;
  logic pad_attribute_gpio_17_we;
  logic [7:0] pad_attribute_gpio_18_qs;
  logic [7:0] pad_attribute_gpio_18_wd;
  logic pad_attribute_gpio_18_we;
  logic [7:0] pad_attribute_gpio_19_qs;
  logic [7:0] pad_attribute_gpio_19_wd;
  logic pad_attribute_gpio_19_we;
  logic [7:0] pad_attribute_gpio_20_qs;
  logic [7:0] pad_attribute_gpio_20_wd;
  logic pad_attribute_gpio_20_we;
  logic [7:0] pad_attribute_gpio_21_qs;
  logic [7:0] pad_attribute_gpio_21_wd;
  logic pad_attribute_gpio_21_we;
  logic [7:0] pad_attribute_gpio_22_qs;
  logic [7:0] pad_attribute_gpio_22_wd;
  logic pad_attribute_gpio_22_we;
  logic [7:0] pad_attribute_gpio_23_qs;
  logic [7:0] pad_attribute_gpio_23_wd;
  logic pad_attribute_gpio_23_we;
  logic [7:0] pad_attribute_gpio_24_qs;
  logic [7:0] pad_attribute_gpio_24_wd;
  logic pad_attribute_gpio_24_we;
  logic [7:0] pad_attribute_spi_flash_sck_qs;
  logic [7:0] pad_attribute_spi_flash_sck_wd;
  logic pad_attribute_spi_flash_sck_we;
  logic [7:0] pad_attribute_spi_flash_cs_0_qs;
  logic [7:0] pad_attribute_spi_flash_cs_0_wd;
  logic pad_attribute_spi_flash_cs_0_we;
  logic [7:0] pad_attribute_spi_flash_cs_1_qs;
  logic [7:0] pad_attribute_spi_flash_cs_1_wd;
  logic pad_attribute_spi_flash_cs_1_we;
  logic [7:0] pad_attribute_spi_flash_sd_0_qs;
  logic [7:0] pad_attribute_spi_flash_sd_0_wd;
  logic pad_attribute_spi_flash_sd_0_we;
  logic [7:0] pad_attribute_spi_flash_sd_1_qs;
  logic [7:0] pad_attribute_spi_flash_sd_1_wd;
  logic pad_attribute_spi_flash_sd_1_we;
  logic [7:0] pad_attribute_spi_flash_sd_2_qs;
  logic [7:0] pad_attribute_spi_flash_sd_2_wd;
  logic pad_attribute_spi_flash_sd_2_we;
  logic [7:0] pad_attribute_spi_flash_sd_3_qs;
  logic [7:0] pad_attribute_spi_flash_sd_3_wd;
  logic pad_attribute_spi_flash_sd_3_we;
  logic [7:0] pad_attribute_spi_sck_qs;
  logic [7:0] pad_attribute_spi_sck_wd;
  logic pad_attribute_spi_sck_we;
  logic [7:0] pad_attribute_spi_sd_0_qs;
  logic [7:0] pad_attribute_spi_sd_0_wd;
  logic pad_attribute_spi_sd_0_we;
  logic [7:0] pad_attribute_spi_sd_1_qs;
  logic [7:0] pad_attribute_spi_sd_1_wd;
  logic pad_attribute_spi_sd_1_we;
  logic [7:0] pad_attribute_spi_sd_2_qs;
  logic [7:0] pad_attribute_spi_sd_2_wd;
  logic pad_attribute_spi_sd_2_we;
  logic [7:0] pad_attribute_spi_sd_3_qs;
  logic [7:0] pad_attribute_spi_sd_3_wd;
  logic pad_attribute_spi_sd_3_we;
  logic [7:0] pad_attribute_i2c_scl_qs;
  logic [7:0] pad_attribute_i2c_scl_wd;
  logic pad_attribute_i2c_scl_we;
  logic [7:0] pad_attribute_i2c_sda_qs;
  logic [7:0] pad_attribute_i2c_sda_wd;
  logic pad_attribute_i2c_sda_we;

  // Register instances
  // R[pad_mux_uart_rx]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_pad_mux_uart_rx (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_uart_rx_we),
      .wd(pad_mux_uart_rx_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_uart_rx.q),

      // to register interface (read)
      .qs(pad_mux_uart_rx_qs)
  );


  // R[pad_mux_uart_tx]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_pad_mux_uart_tx (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_uart_tx_we),
      .wd(pad_mux_uart_tx_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_uart_tx.q),

      // to register interface (read)
      .qs(pad_mux_uart_tx_qs)
  );


  // R[pad_mux_exit_valid]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_pad_mux_exit_valid (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_exit_valid_we),
      .wd(pad_mux_exit_valid_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_exit_valid.q),

      // to register interface (read)
      .qs(pad_mux_exit_valid_qs)
  );


  // R[pad_mux_i2c_scl]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_pad_mux_i2c_scl (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_i2c_scl_we),
      .wd(pad_mux_i2c_scl_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_i2c_scl.q),

      // to register interface (read)
      .qs(pad_mux_i2c_scl_qs)
  );


  // R[pad_mux_i2c_sda]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_pad_mux_i2c_sda (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_mux_i2c_sda_we),
      .wd(pad_mux_i2c_sda_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_mux_i2c_sda.q),

      // to register interface (read)
      .qs(pad_mux_i2c_sda_qs)
  );


  // R[pad_attribute_clk]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_clk (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_clk_we),
      .wd(pad_attribute_clk_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_clk.q),

      // to register interface (read)
      .qs(pad_attribute_clk_qs)
  );


  // R[pad_attribute_rst]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_rst (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_rst_we),
      .wd(pad_attribute_rst_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_rst.q),

      // to register interface (read)
      .qs(pad_attribute_rst_qs)
  );


  // R[pad_attribute_boot_select]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_boot_select (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_boot_select_we),
      .wd(pad_attribute_boot_select_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_boot_select.q),

      // to register interface (read)
      .qs(pad_attribute_boot_select_qs)
  );


  // R[pad_attribute_execute_from_flash]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_execute_from_flash (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_execute_from_flash_we),
      .wd(pad_attribute_execute_from_flash_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_execute_from_flash.q),

      // to register interface (read)
      .qs(pad_attribute_execute_from_flash_qs)
  );


  // R[pad_attribute_jtag_tck]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_jtag_tck (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_jtag_tck_we),
      .wd(pad_attribute_jtag_tck_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_jtag_tck.q),

      // to register interface (read)
      .qs(pad_attribute_jtag_tck_qs)
  );


  // R[pad_attribute_jtag_tms]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_jtag_tms (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_jtag_tms_we),
      .wd(pad_attribute_jtag_tms_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_jtag_tms.q),

      // to register interface (read)
      .qs(pad_attribute_jtag_tms_qs)
  );


  // R[pad_attribute_jtag_trst]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_jtag_trst (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_jtag_trst_we),
      .wd(pad_attribute_jtag_trst_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_jtag_trst.q),

      // to register interface (read)
      .qs(pad_attribute_jtag_trst_qs)
  );


  // R[pad_attribute_jtag_tdi]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_jtag_tdi (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_jtag_tdi_we),
      .wd(pad_attribute_jtag_tdi_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_jtag_tdi.q),

      // to register interface (read)
      .qs(pad_attribute_jtag_tdi_qs)
  );


  // R[pad_attribute_jtag_tdo]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_jtag_tdo (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_jtag_tdo_we),
      .wd(pad_attribute_jtag_tdo_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_jtag_tdo.q),

      // to register interface (read)
      .qs(pad_attribute_jtag_tdo_qs)
  );


  // R[pad_attribute_uart_rx]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_uart_rx (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_uart_rx_we),
      .wd(pad_attribute_uart_rx_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_uart_rx.q),

      // to register interface (read)
      .qs(pad_attribute_uart_rx_qs)
  );


  // R[pad_attribute_uart_tx]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_uart_tx (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_uart_tx_we),
      .wd(pad_attribute_uart_tx_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_uart_tx.q),

      // to register interface (read)
      .qs(pad_attribute_uart_tx_qs)
  );


  // R[pad_attribute_exit_valid]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_exit_valid (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_exit_valid_we),
      .wd(pad_attribute_exit_valid_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_exit_valid.q),

      // to register interface (read)
      .qs(pad_attribute_exit_valid_qs)
  );


  // R[pad_attribute_gpio_0]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_0_we),
      .wd(pad_attribute_gpio_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_0.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_0_qs)
  );


  // R[pad_attribute_gpio_1]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_1_we),
      .wd(pad_attribute_gpio_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_1.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_1_qs)
  );


  // R[pad_attribute_gpio_2]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_2_we),
      .wd(pad_attribute_gpio_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_2.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_2_qs)
  );


  // R[pad_attribute_gpio_3]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_3_we),
      .wd(pad_attribute_gpio_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_3.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_3_qs)
  );


  // R[pad_attribute_gpio_4]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_4_we),
      .wd(pad_attribute_gpio_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_4.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_4_qs)
  );


  // R[pad_attribute_gpio_5]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_5_we),
      .wd(pad_attribute_gpio_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_5.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_5_qs)
  );


  // R[pad_attribute_gpio_6]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_6_we),
      .wd(pad_attribute_gpio_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_6.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_6_qs)
  );


  // R[pad_attribute_gpio_7]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_7_we),
      .wd(pad_attribute_gpio_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_7.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_7_qs)
  );


  // R[pad_attribute_gpio_8]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_8_we),
      .wd(pad_attribute_gpio_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_8.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_8_qs)
  );


  // R[pad_attribute_gpio_9]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_9_we),
      .wd(pad_attribute_gpio_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_9.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_9_qs)
  );


  // R[pad_attribute_gpio_10]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_10_we),
      .wd(pad_attribute_gpio_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_10.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_10_qs)
  );


  // R[pad_attribute_gpio_11]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_11_we),
      .wd(pad_attribute_gpio_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_11.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_11_qs)
  );


  // R[pad_attribute_gpio_12]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_12_we),
      .wd(pad_attribute_gpio_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_12.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_12_qs)
  );


  // R[pad_attribute_gpio_13]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_13_we),
      .wd(pad_attribute_gpio_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_13.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_13_qs)
  );


  // R[pad_attribute_gpio_14]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_14_we),
      .wd(pad_attribute_gpio_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_14.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_14_qs)
  );


  // R[pad_attribute_gpio_15]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_15_we),
      .wd(pad_attribute_gpio_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_15.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_15_qs)
  );


  // R[pad_attribute_gpio_16]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_16 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_16_we),
      .wd(pad_attribute_gpio_16_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_16.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_16_qs)
  );


  // R[pad_attribute_gpio_17]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_17 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_17_we),
      .wd(pad_attribute_gpio_17_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_17.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_17_qs)
  );


  // R[pad_attribute_gpio_18]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_18 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_18_we),
      .wd(pad_attribute_gpio_18_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_18.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_18_qs)
  );


  // R[pad_attribute_gpio_19]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_19 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_19_we),
      .wd(pad_attribute_gpio_19_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_19.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_19_qs)
  );


  // R[pad_attribute_gpio_20]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_20 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_20_we),
      .wd(pad_attribute_gpio_20_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_20.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_20_qs)
  );


  // R[pad_attribute_gpio_21]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_21 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_21_we),
      .wd(pad_attribute_gpio_21_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_21.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_21_qs)
  );


  // R[pad_attribute_gpio_22]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_22 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_22_we),
      .wd(pad_attribute_gpio_22_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_22.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_22_qs)
  );


  // R[pad_attribute_gpio_23]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_23 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_23_we),
      .wd(pad_attribute_gpio_23_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_23.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_23_qs)
  );


  // R[pad_attribute_gpio_24]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_gpio_24 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_gpio_24_we),
      .wd(pad_attribute_gpio_24_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_gpio_24.q),

      // to register interface (read)
      .qs(pad_attribute_gpio_24_qs)
  );


  // R[pad_attribute_spi_flash_sck]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_flash_sck (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_flash_sck_we),
      .wd(pad_attribute_spi_flash_sck_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_flash_sck.q),

      // to register interface (read)
      .qs(pad_attribute_spi_flash_sck_qs)
  );


  // R[pad_attribute_spi_flash_cs_0]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_flash_cs_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_flash_cs_0_we),
      .wd(pad_attribute_spi_flash_cs_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_flash_cs_0.q),

      // to register interface (read)
      .qs(pad_attribute_spi_flash_cs_0_qs)
  );


  // R[pad_attribute_spi_flash_cs_1]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_flash_cs_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_flash_cs_1_we),
      .wd(pad_attribute_spi_flash_cs_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_flash_cs_1.q),

      // to register interface (read)
      .qs(pad_attribute_spi_flash_cs_1_qs)
  );


  // R[pad_attribute_spi_flash_sd_0]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_flash_sd_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_flash_sd_0_we),
      .wd(pad_attribute_spi_flash_sd_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_flash_sd_0.q),

      // to register interface (read)
      .qs(pad_attribute_spi_flash_sd_0_qs)
  );


  // R[pad_attribute_spi_flash_sd_1]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_flash_sd_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_flash_sd_1_we),
      .wd(pad_attribute_spi_flash_sd_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_flash_sd_1.q),

      // to register interface (read)
      .qs(pad_attribute_spi_flash_sd_1_qs)
  );


  // R[pad_attribute_spi_flash_sd_2]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_flash_sd_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_flash_sd_2_we),
      .wd(pad_attribute_spi_flash_sd_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_flash_sd_2.q),

      // to register interface (read)
      .qs(pad_attribute_spi_flash_sd_2_qs)
  );


  // R[pad_attribute_spi_flash_sd_3]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_flash_sd_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_flash_sd_3_we),
      .wd(pad_attribute_spi_flash_sd_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_flash_sd_3.q),

      // to register interface (read)
      .qs(pad_attribute_spi_flash_sd_3_qs)
  );


  // R[pad_attribute_spi_sck]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_sck (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_sck_we),
      .wd(pad_attribute_spi_sck_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_sck.q),

      // to register interface (read)
      .qs(pad_attribute_spi_sck_qs)
  );


  // R[pad_attribute_spi_sd_0]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_sd_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_sd_0_we),
      .wd(pad_attribute_spi_sd_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_sd_0.q),

      // to register interface (read)
      .qs(pad_attribute_spi_sd_0_qs)
  );


  // R[pad_attribute_spi_sd_1]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_sd_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_sd_1_we),
      .wd(pad_attribute_spi_sd_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_sd_1.q),

      // to register interface (read)
      .qs(pad_attribute_spi_sd_1_qs)
  );


  // R[pad_attribute_spi_sd_2]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_sd_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_sd_2_we),
      .wd(pad_attribute_spi_sd_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_sd_2.q),

      // to register interface (read)
      .qs(pad_attribute_spi_sd_2_qs)
  );


  // R[pad_attribute_spi_sd_3]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_spi_sd_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_spi_sd_3_we),
      .wd(pad_attribute_spi_sd_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_spi_sd_3.q),

      // to register interface (read)
      .qs(pad_attribute_spi_sd_3_qs)
  );


  // R[pad_attribute_i2c_scl]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_i2c_scl (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_i2c_scl_we),
      .wd(pad_attribute_i2c_scl_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_i2c_scl.q),

      // to register interface (read)
      .qs(pad_attribute_i2c_scl_qs)
  );


  // R[pad_attribute_i2c_sda]: V(False)

  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pad_attribute_i2c_sda (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_attribute_i2c_sda_we),
      .wd(pad_attribute_i2c_sda_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad_attribute_i2c_sda.q),

      // to register interface (read)
      .qs(pad_attribute_i2c_sda_qs)
  );




  logic [55:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == PAD_CONTROL_PAD_MUX_UART_RX_OFFSET);
    addr_hit[1] = (reg_addr == PAD_CONTROL_PAD_MUX_UART_TX_OFFSET);
    addr_hit[2] = (reg_addr == PAD_CONTROL_PAD_MUX_EXIT_VALID_OFFSET);
    addr_hit[3] = (reg_addr == PAD_CONTROL_PAD_MUX_I2C_SCL_OFFSET);
    addr_hit[4] = (reg_addr == PAD_CONTROL_PAD_MUX_I2C_SDA_OFFSET);
    addr_hit[5] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_CLK_OFFSET);
    addr_hit[6] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_RST_OFFSET);
    addr_hit[7] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_BOOT_SELECT_OFFSET);
    addr_hit[8] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_EXECUTE_FROM_FLASH_OFFSET);
    addr_hit[9] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TCK_OFFSET);
    addr_hit[10] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TMS_OFFSET);
    addr_hit[11] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TRST_OFFSET);
    addr_hit[12] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDI_OFFSET);
    addr_hit[13] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDO_OFFSET);
    addr_hit[14] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_UART_RX_OFFSET);
    addr_hit[15] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_UART_TX_OFFSET);
    addr_hit[16] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_EXIT_VALID_OFFSET);
    addr_hit[17] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_0_OFFSET);
    addr_hit[18] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_1_OFFSET);
    addr_hit[19] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_2_OFFSET);
    addr_hit[20] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_3_OFFSET);
    addr_hit[21] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_4_OFFSET);
    addr_hit[22] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_5_OFFSET);
    addr_hit[23] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_6_OFFSET);
    addr_hit[24] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_7_OFFSET);
    addr_hit[25] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_8_OFFSET);
    addr_hit[26] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_9_OFFSET);
    addr_hit[27] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_10_OFFSET);
    addr_hit[28] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_11_OFFSET);
    addr_hit[29] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_12_OFFSET);
    addr_hit[30] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_13_OFFSET);
    addr_hit[31] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_14_OFFSET);
    addr_hit[32] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_15_OFFSET);
    addr_hit[33] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_16_OFFSET);
    addr_hit[34] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_17_OFFSET);
    addr_hit[35] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_18_OFFSET);
    addr_hit[36] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_19_OFFSET);
    addr_hit[37] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_20_OFFSET);
    addr_hit[38] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_21_OFFSET);
    addr_hit[39] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_22_OFFSET);
    addr_hit[40] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_23_OFFSET);
    addr_hit[41] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_GPIO_24_OFFSET);
    addr_hit[42] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SCK_OFFSET);
    addr_hit[43] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_0_OFFSET);
    addr_hit[44] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_1_OFFSET);
    addr_hit[45] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_0_OFFSET);
    addr_hit[46] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_1_OFFSET);
    addr_hit[47] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_2_OFFSET);
    addr_hit[48] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_3_OFFSET);
    addr_hit[49] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_SCK_OFFSET);
    addr_hit[50] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_0_OFFSET);
    addr_hit[51] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_1_OFFSET);
    addr_hit[52] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_2_OFFSET);
    addr_hit[53] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_3_OFFSET);
    addr_hit[54] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_I2C_SCL_OFFSET);
    addr_hit[55] = (reg_addr == PAD_CONTROL_PAD_ATTRIBUTE_I2C_SDA_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(PAD_CONTROL_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(PAD_CONTROL_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(PAD_CONTROL_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(PAD_CONTROL_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(PAD_CONTROL_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(PAD_CONTROL_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(PAD_CONTROL_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(PAD_CONTROL_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(PAD_CONTROL_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(PAD_CONTROL_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(PAD_CONTROL_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(PAD_CONTROL_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(PAD_CONTROL_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(PAD_CONTROL_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(PAD_CONTROL_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(PAD_CONTROL_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(PAD_CONTROL_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(PAD_CONTROL_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(PAD_CONTROL_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(PAD_CONTROL_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(PAD_CONTROL_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(PAD_CONTROL_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(PAD_CONTROL_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(PAD_CONTROL_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(PAD_CONTROL_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(PAD_CONTROL_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(PAD_CONTROL_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(PAD_CONTROL_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(PAD_CONTROL_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(PAD_CONTROL_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(PAD_CONTROL_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(PAD_CONTROL_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(PAD_CONTROL_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(PAD_CONTROL_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(PAD_CONTROL_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(PAD_CONTROL_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(PAD_CONTROL_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(PAD_CONTROL_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(PAD_CONTROL_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(PAD_CONTROL_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(PAD_CONTROL_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(PAD_CONTROL_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(PAD_CONTROL_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(PAD_CONTROL_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(PAD_CONTROL_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(PAD_CONTROL_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(PAD_CONTROL_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(PAD_CONTROL_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(PAD_CONTROL_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(PAD_CONTROL_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(PAD_CONTROL_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(PAD_CONTROL_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(PAD_CONTROL_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(PAD_CONTROL_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(PAD_CONTROL_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(PAD_CONTROL_PERMIT[55] & ~reg_be)))));
  end

  assign pad_mux_uart_rx_we = addr_hit[0] & reg_we & !reg_error;
  assign pad_mux_uart_rx_wd = reg_wdata[3:0];

  assign pad_mux_uart_tx_we = addr_hit[1] & reg_we & !reg_error;
  assign pad_mux_uart_tx_wd = reg_wdata[3:0];

  assign pad_mux_exit_valid_we = addr_hit[2] & reg_we & !reg_error;
  assign pad_mux_exit_valid_wd = reg_wdata[3:0];

  assign pad_mux_i2c_scl_we = addr_hit[3] & reg_we & !reg_error;
  assign pad_mux_i2c_scl_wd = reg_wdata[3:0];

  assign pad_mux_i2c_sda_we = addr_hit[4] & reg_we & !reg_error;
  assign pad_mux_i2c_sda_wd = reg_wdata[3:0];

  assign pad_attribute_clk_we = addr_hit[5] & reg_we & !reg_error;
  assign pad_attribute_clk_wd = reg_wdata[7:0];

  assign pad_attribute_rst_we = addr_hit[6] & reg_we & !reg_error;
  assign pad_attribute_rst_wd = reg_wdata[7:0];

  assign pad_attribute_boot_select_we = addr_hit[7] & reg_we & !reg_error;
  assign pad_attribute_boot_select_wd = reg_wdata[7:0];

  assign pad_attribute_execute_from_flash_we = addr_hit[8] & reg_we & !reg_error;
  assign pad_attribute_execute_from_flash_wd = reg_wdata[7:0];

  assign pad_attribute_jtag_tck_we = addr_hit[9] & reg_we & !reg_error;
  assign pad_attribute_jtag_tck_wd = reg_wdata[7:0];

  assign pad_attribute_jtag_tms_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_attribute_jtag_tms_wd = reg_wdata[7:0];

  assign pad_attribute_jtag_trst_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_attribute_jtag_trst_wd = reg_wdata[7:0];

  assign pad_attribute_jtag_tdi_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_attribute_jtag_tdi_wd = reg_wdata[7:0];

  assign pad_attribute_jtag_tdo_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_attribute_jtag_tdo_wd = reg_wdata[7:0];

  assign pad_attribute_uart_rx_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_attribute_uart_rx_wd = reg_wdata[7:0];

  assign pad_attribute_uart_tx_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_attribute_uart_tx_wd = reg_wdata[7:0];

  assign pad_attribute_exit_valid_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_attribute_exit_valid_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_0_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_attribute_gpio_0_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_1_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_attribute_gpio_1_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_2_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_attribute_gpio_2_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_3_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_attribute_gpio_3_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_4_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_attribute_gpio_4_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_5_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_attribute_gpio_5_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_6_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_attribute_gpio_6_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_7_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_attribute_gpio_7_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_8_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_attribute_gpio_8_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_9_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_attribute_gpio_9_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_10_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_attribute_gpio_10_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_11_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_attribute_gpio_11_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_12_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_attribute_gpio_12_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_13_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_attribute_gpio_13_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_14_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_attribute_gpio_14_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_15_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_attribute_gpio_15_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_16_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_attribute_gpio_16_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_17_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_attribute_gpio_17_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_18_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_attribute_gpio_18_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_19_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_attribute_gpio_19_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_20_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_attribute_gpio_20_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_21_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_attribute_gpio_21_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_22_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_attribute_gpio_22_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_23_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_attribute_gpio_23_wd = reg_wdata[7:0];

  assign pad_attribute_gpio_24_we = addr_hit[41] & reg_we & !reg_error;
  assign pad_attribute_gpio_24_wd = reg_wdata[7:0];

  assign pad_attribute_spi_flash_sck_we = addr_hit[42] & reg_we & !reg_error;
  assign pad_attribute_spi_flash_sck_wd = reg_wdata[7:0];

  assign pad_attribute_spi_flash_cs_0_we = addr_hit[43] & reg_we & !reg_error;
  assign pad_attribute_spi_flash_cs_0_wd = reg_wdata[7:0];

  assign pad_attribute_spi_flash_cs_1_we = addr_hit[44] & reg_we & !reg_error;
  assign pad_attribute_spi_flash_cs_1_wd = reg_wdata[7:0];

  assign pad_attribute_spi_flash_sd_0_we = addr_hit[45] & reg_we & !reg_error;
  assign pad_attribute_spi_flash_sd_0_wd = reg_wdata[7:0];

  assign pad_attribute_spi_flash_sd_1_we = addr_hit[46] & reg_we & !reg_error;
  assign pad_attribute_spi_flash_sd_1_wd = reg_wdata[7:0];

  assign pad_attribute_spi_flash_sd_2_we = addr_hit[47] & reg_we & !reg_error;
  assign pad_attribute_spi_flash_sd_2_wd = reg_wdata[7:0];

  assign pad_attribute_spi_flash_sd_3_we = addr_hit[48] & reg_we & !reg_error;
  assign pad_attribute_spi_flash_sd_3_wd = reg_wdata[7:0];

  assign pad_attribute_spi_sck_we = addr_hit[49] & reg_we & !reg_error;
  assign pad_attribute_spi_sck_wd = reg_wdata[7:0];

  assign pad_attribute_spi_sd_0_we = addr_hit[50] & reg_we & !reg_error;
  assign pad_attribute_spi_sd_0_wd = reg_wdata[7:0];

  assign pad_attribute_spi_sd_1_we = addr_hit[51] & reg_we & !reg_error;
  assign pad_attribute_spi_sd_1_wd = reg_wdata[7:0];

  assign pad_attribute_spi_sd_2_we = addr_hit[52] & reg_we & !reg_error;
  assign pad_attribute_spi_sd_2_wd = reg_wdata[7:0];

  assign pad_attribute_spi_sd_3_we = addr_hit[53] & reg_we & !reg_error;
  assign pad_attribute_spi_sd_3_wd = reg_wdata[7:0];

  assign pad_attribute_i2c_scl_we = addr_hit[54] & reg_we & !reg_error;
  assign pad_attribute_i2c_scl_wd = reg_wdata[7:0];

  assign pad_attribute_i2c_sda_we = addr_hit[55] & reg_we & !reg_error;
  assign pad_attribute_i2c_sda_wd = reg_wdata[7:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[3:0] = pad_mux_uart_rx_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[3:0] = pad_mux_uart_tx_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[3:0] = pad_mux_exit_valid_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[3:0] = pad_mux_i2c_scl_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[3:0] = pad_mux_i2c_sda_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[7:0] = pad_attribute_clk_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = pad_attribute_rst_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[7:0] = pad_attribute_boot_select_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[7:0] = pad_attribute_execute_from_flash_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[7:0] = pad_attribute_jtag_tck_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[7:0] = pad_attribute_jtag_tms_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[7:0] = pad_attribute_jtag_trst_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[7:0] = pad_attribute_jtag_tdi_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[7:0] = pad_attribute_jtag_tdo_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[7:0] = pad_attribute_uart_rx_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[7:0] = pad_attribute_uart_tx_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[7:0] = pad_attribute_exit_valid_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_0_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_1_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_2_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_3_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_4_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_5_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_6_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_7_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_8_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_9_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_10_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_11_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_12_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_13_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_14_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_15_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_16_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_17_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_18_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_19_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_20_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_21_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_22_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_23_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[7:0] = pad_attribute_gpio_24_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_flash_sck_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_flash_cs_0_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_flash_cs_1_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_flash_sd_0_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_flash_sd_1_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_flash_sd_2_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_flash_sd_3_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_sck_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_sd_0_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_sd_1_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_sd_2_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[7:0] = pad_attribute_spi_sd_3_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[7:0] = pad_attribute_i2c_scl_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[7:0] = pad_attribute_i2c_sda_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
