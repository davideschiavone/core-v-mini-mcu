diff --git a/hw/ip/spi_host/data/spi_host.hjson b/hw/ip/spi_host/data/spi_host.hjson
index b2726f2..64e1ce1 100644
--- a/hw/ip/spi_host/data/spi_host.hjson
+++ b/hw/ip/spi_host/data/spi_host.hjson
@@ -314,20 +314,20 @@
       hwaccess: "hro",
       hwqe: "true",
       fields: [
-        { bits: "13:12",
+        { bits: "20:19",
           name: "DIRECTION",
           desc: '''The direction for the following command: "0" = Dummy cycles
                    (no TX/RX). "1" = Rx only, "2" = Tx only, "3" = Bidirectional
                    Tx/Rx (Standard SPI mode only).'''
           resval: "0x0"
         }
-        { bits: "11:10",
+        { bits: "18:17",
           name: "SPEED",
           desc: '''The speed for this command segment: "0" = Standard SPI. "1" = Dual SPI.
                    "2"=Quad SPI,  "3": RESERVED.''',
           resval: "0x0"
         },
-        { bits: "9",
+        { bits: "16",
           name: "CSAAT",
           desc: '''Chip select active after transaction.  If CSAAT = 0, the
                    chip select line is raised immediately at the end of the
@@ -339,7 +339,7 @@
                    and transmitting or receiving data from the device.''',
                    resval: "0x0"
         },
-        { bits: "8:0",
+        { bits: "15:0",
           name: "LEN",
           desc: '''Segment Length.
 
diff --git a/hw/ip/spi_host/rtl/spi_host.sv b/hw/ip/spi_host/rtl/spi_host.sv
index b096564..38cd6a1 100644
--- a/hw/ip/spi_host/rtl/spi_host.sv
+++ b/hw/ip/spi_host/rtl/spi_host.sv
@@ -32,6 +32,9 @@ module spi_host
   output logic [3:0]       cio_sd_en_o,
   input        [3:0]       cio_sd_i,
 
+  // DMA Interface
+  output logic             rx_empty_o,
+
   output logic             intr_error_o,
   output logic             intr_spi_event_o
 );
@@ -252,6 +255,8 @@ module spi_host
   logic        tx_empty, tx_full, tx_wm;
   logic        rx_empty, rx_full, rx_wm;
 
+  assign rx_empty_o = rx_empty;
+
   assign rx_watermark = reg2hw.control.rx_watermark.q;
   assign tx_watermark = reg2hw.control.tx_watermark.q;
 
diff --git a/hw/ip/spi_host/rtl/spi_host_cmd_pkg.sv b/hw/ip/spi_host/rtl/spi_host_cmd_pkg.sv
index 45abc02..f38f555 100644
--- a/hw/ip/spi_host/rtl/spi_host_cmd_pkg.sv
+++ b/hw/ip/spi_host/rtl/spi_host_cmd_pkg.sv
@@ -8,7 +8,7 @@
 package spi_host_cmd_pkg;
 
   parameter int CSW = prim_util_pkg::vbits(spi_host_reg_pkg::NumCS);
-  parameter int CmdSize = CSW + 45;
+  parameter int CmdSize = CSW + 52;
 
   // For decoding the direction register
   typedef enum logic [1:0] {
@@ -40,7 +40,7 @@ package spi_host_cmd_pkg;
     logic [1:0] speed;
     logic       cmd_wr_en;
     logic       cmd_rd_en;
-    logic [8:0] len;
+    logic [15:0] len;
     logic       csaat;
   } segment_t;
 
diff --git a/hw/ip/spi_host/rtl/spi_host_fsm.sv b/hw/ip/spi_host/rtl/spi_host_fsm.sv
index 3e01bff..29ac442 100644
--- a/hw/ip/spi_host/rtl/spi_host_fsm.sv
+++ b/hw/ip/spi_host/rtl/spi_host_fsm.sv
@@ -56,12 +56,12 @@ module spi_host_fsm
   logic             cmd_rd_en, cmd_rd_en_q;
   // cmd_len needs no data latching as it is only used at the very start of a command.
   // The corresponding register, cmd_len_q, would create a warning at synthesis
-  logic [8:0]       cmd_len;
+  logic [15:0]      cmd_len;
   logic             csaat;
   logic             csaat_q;
 
   logic [2:0]       bit_cntr_d, bit_cntr_q;
-  logic [8:0]       byte_cntr_d, byte_cntr_q;
+  logic [15:0]      byte_cntr_d, byte_cntr_q;
   logic [3:0]       lead_cntr_d, idle_cntr_d, trail_cntr_d;
   logic [3:0]       lead_cntr_q, idle_cntr_q, trail_cntr_q;
   logic             last_bit, last_byte;
@@ -431,9 +431,9 @@ module spi_host_fsm
                       bit_cntr_q;
 
   assign last_bit  = (bit_cntr_q == 3'h0);
-  assign last_byte = (byte_cntr_q == 9'h0);
+  assign last_byte = (byte_cntr_q == 16'h0);
 
-  assign byte_cntr_d = sw_rst_i    ? 9'h0 :
+  assign byte_cntr_d = sw_rst_i    ? 16'h0 :
                        !fsm_en     ? byte_cntr_q :
                        new_command ? cmd_len :
                        byte_ending ? byte_cntr_q - 1 :
@@ -468,7 +468,7 @@ module spi_host_fsm
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       bit_cntr_q   <= 3'h0;
-      byte_cntr_q  <= 9'h0;
+      byte_cntr_q  <= 16'h0;
       idle_cntr_q  <= 4'h0;
       lead_cntr_q  <= 4'h0;
       trail_cntr_q <= 4'h0;
diff --git a/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv b/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv
index c519d9f..5c25dc0 100644
--- a/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv
+++ b/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv
@@ -99,7 +99,7 @@ package spi_host_reg_pkg;
 
   typedef struct packed {
     struct packed {
-      logic [8:0]  q;
+      logic [15:0] q;
       logic        qe;
     } len;
     struct packed {
@@ -264,14 +264,14 @@ package spi_host_reg_pkg;
 
   // Register -> HW type
   typedef struct packed {
-    spi_host_reg2hw_intr_state_reg_t intr_state; // [155:154]
-    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [153:152]
-    spi_host_reg2hw_intr_test_reg_t intr_test; // [151:148]
-    spi_host_reg2hw_alert_test_reg_t alert_test; // [147:146]
-    spi_host_reg2hw_control_reg_t control; // [145:128]
-    spi_host_reg2hw_configopts_mreg_t [1:0] configopts; // [127:66]
-    spi_host_reg2hw_csid_reg_t csid; // [65:34]
-    spi_host_reg2hw_command_reg_t command; // [33:16]
+    spi_host_reg2hw_intr_state_reg_t intr_state; // [162:161]
+    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [160:159]
+    spi_host_reg2hw_intr_test_reg_t intr_test; // [158:155]
+    spi_host_reg2hw_alert_test_reg_t alert_test; // [154:153]
+    spi_host_reg2hw_control_reg_t control; // [152:135]
+    spi_host_reg2hw_configopts_mreg_t [1:0] configopts; // [134:73]
+    spi_host_reg2hw_csid_reg_t csid; // [72:41]
+    spi_host_reg2hw_command_reg_t command; // [40:16]
     spi_host_reg2hw_error_enable_reg_t error_enable; // [15:11]
     spi_host_reg2hw_error_status_reg_t error_status; // [10:6]
     spi_host_reg2hw_event_enable_reg_t event_enable; // [5:0]
@@ -338,7 +338,7 @@ package spi_host_reg_pkg;
     4'b 1111, // index[ 6] SPI_HOST_CONFIGOPTS_0
     4'b 1111, // index[ 7] SPI_HOST_CONFIGOPTS_1
     4'b 1111, // index[ 8] SPI_HOST_CSID
-    4'b 0011, // index[ 9] SPI_HOST_COMMAND
+    4'b 0111, // index[ 9] SPI_HOST_COMMAND
     4'b 0001, // index[10] SPI_HOST_ERROR_ENABLE
     4'b 0001, // index[11] SPI_HOST_ERROR_STATUS
     4'b 0001  // index[12] SPI_HOST_EVENT_ENABLE
diff --git a/hw/ip/spi_host/rtl/spi_host_reg_top.sv b/hw/ip/spi_host/rtl/spi_host_reg_top.sv
index 748c97e..2f2e643 100644
--- a/hw/ip/spi_host/rtl/spi_host_reg_top.sv
+++ b/hw/ip/spi_host/rtl/spi_host_reg_top.sv
@@ -196,8 +196,8 @@ module spi_host_reg_top #(
   logic [31:0] csid_qs;
   logic [31:0] csid_wd;
   logic csid_we;
-  logic [8:0] command_len_qs;
-  logic [8:0] command_len_wd;
+  logic [15:0] command_len_qs;
+  logic [15:0] command_len_wd;
   logic command_len_we;
   logic command_csaat_qs;
   logic command_csaat_wd;
@@ -1248,11 +1248,11 @@ module spi_host_reg_top #(
 
   // R[command]: V(False)
 
-  //   F[len]: 8:0
+  //   F[len]: 15:0
   prim_subreg #(
-    .DW      (9),
+    .DW      (16),
     .SWACCESS("RW"),
-    .RESVAL  (9'h0)
+    .RESVAL  (16'h0)
   ) u_command_len (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
@@ -1274,7 +1274,7 @@ module spi_host_reg_top #(
   );
 
 
-  //   F[csaat]: 9:9
+  //   F[csaat]: 16:16
   prim_subreg #(
     .DW      (1),
     .SWACCESS("RW"),
@@ -1300,7 +1300,7 @@ module spi_host_reg_top #(
   );
 
 
-  //   F[speed]: 11:10
+  //   F[speed]: 18:17
   prim_subreg #(
     .DW      (2),
     .SWACCESS("RW"),
@@ -1326,7 +1326,7 @@ module spi_host_reg_top #(
   );
 
 
-  //   F[direction]: 13:12
+  //   F[direction]: 20:19
   prim_subreg #(
     .DW      (2),
     .SWACCESS("RW"),
@@ -1893,16 +1893,16 @@ module spi_host_reg_top #(
   assign csid_wd = reg_wdata[31:0];
 
   assign command_len_we = addr_hit[9] & reg_we & !reg_error;
-  assign command_len_wd = reg_wdata[8:0];
+  assign command_len_wd = reg_wdata[15:0];
 
   assign command_csaat_we = addr_hit[9] & reg_we & !reg_error;
-  assign command_csaat_wd = reg_wdata[9];
+  assign command_csaat_wd = reg_wdata[16];
 
   assign command_speed_we = addr_hit[9] & reg_we & !reg_error;
-  assign command_speed_wd = reg_wdata[11:10];
+  assign command_speed_wd = reg_wdata[18:17];
 
   assign command_direction_we = addr_hit[9] & reg_we & !reg_error;
-  assign command_direction_wd = reg_wdata[13:12];
+  assign command_direction_wd = reg_wdata[20:19];
 
   assign error_enable_cmdbusy_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_cmdbusy_wd = reg_wdata[0];
@@ -2023,10 +2023,10 @@ module spi_host_reg_top #(
       end
 
       addr_hit[9]: begin
-        reg_rdata_next[8:0] = command_len_qs;
-        reg_rdata_next[9] = command_csaat_qs;
-        reg_rdata_next[11:10] = command_speed_qs;
-        reg_rdata_next[13:12] = command_direction_qs;
+        reg_rdata_next[15:0] = command_len_qs;
+        reg_rdata_next[16] = command_csaat_qs;
+        reg_rdata_next[18:17] = command_speed_qs;
+        reg_rdata_next[20:19] = command_direction_qs;
       end
 
       addr_hit[10]: begin
