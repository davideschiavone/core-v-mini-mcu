diff --git a/hw/ip/spi_host/data/spi_host.hjson b/hw/ip/spi_host/data/spi_host.hjson
index ef60a96dd..b2726f2b2 100644
--- a/hw/ip/spi_host/data/spi_host.hjson
+++ b/hw/ip/spi_host/data/spi_host.hjson
@@ -7,7 +7,7 @@
   reset_primary: "rst_ni",
   other_reset_list: [ "rst_core_ni" ],
   bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
+    { protocol: "reg_iface", direction: "device" }
   ],
   inter_signal_list: [
     { struct:  "passthrough",
@@ -34,7 +34,7 @@
     { name: "NumCS",
       desc: "The number of active-low chip select (cs_n) lines to create.",
       type: "int",
-      default: "1"
+      default: "2"
     },
     { name: "TxDepth",
       desc: "The size of the Tx FIFO (in words)",
@@ -72,6 +72,13 @@
                information.'''
     }
   ],
+  alert_list: [
+    { name: "fatal_fault",
+      desc: '''
+      This fatal alert is triggered when a fatal TL-UL bus integrity fault is detected.
+      '''
+    }
+  ],
   registers: [
     { name: "CONTROL",
       desc: "Control register",
@@ -93,17 +100,6 @@
                    clearing this bit.''',
           resval: "0x0"
         },
-        { bits: "29",
-          name: "PASSTHRU",
-          desc: '''Enables Pass-through mode, wherein the SPI_HOST IP surrenders
-                   control of the SPI bus to another block. In this mode the
-                   `sck`, `cs_n` and `sd` signals are no longer driven by
-                   the SPI_HOST IP, rather they are multiplexed out to match the
-                   on-chip inputs `pt_sck_i`, `pt_cs_n_i`, `pt_sden_i`, `pt_sdo_i`,
-                   and `pt_sdi_o`.  (Since the `sd` bus is bidirectional, there are
-                   separate input, output and tri-state controls for this bus.)''',
-          resval: "0x0"
-        },
         { bits: "15:8",
           name: "TX_WATERMARK"
           desc: '''If !!EVENT_ENABLE.TXWM is set, the IP will send
@@ -312,8 +308,8 @@
     { name: "COMMAND",
       desc: '''Command Register
 
-               Parameters specific to each command segment.  One common register for all
-               devices''',
+               Parameters specific to each command segment.  Unlike the `CONFIGOPTS` multi-register,
+               there is only one command register for controlling all attached SPI devices''',
       swaccess: "rw",
       hwaccess: "hro",
       hwqe: "true",
@@ -321,7 +317,7 @@
         { bits: "13:12",
           name: "DIRECTION",
           desc: '''The direction for the following command: "0" = Dummy cycles
-                   (no TX/RX). "1" = Rx only, "2" = Tx only, "3" Bidirectional
+                   (no TX/RX). "1" = Rx only, "2" = Tx only, "3" = Bidirectional
                    Tx/Rx (Standard SPI mode only).'''
           resval: "0x0"
         }
diff --git a/hw/ip/spi_host/rtl/spi_host.sv b/hw/ip/spi_host/rtl/spi_host.sv
index 6694d3bc7..b096564eb 100644
--- a/hw/ip/spi_host/rtl/spi_host.sv
+++ b/hw/ip/spi_host/rtl/spi_host.sv
@@ -6,21 +6,22 @@
 //
 //
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module spi_host
   import spi_host_reg_pkg::*;
- (
+#(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
+) (
   input              clk_i,
   input              rst_ni,
   input              clk_core_i,
   input              rst_core_ni,
 
-  input              lc_ctrl_pkg::lc_tx_t scanmode_i,
-
   // Register interface
-  input              tlul_pkg::tl_h2d_t tl_i,
-  output             tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // SPI Interface
   output logic             cio_sck_o,
@@ -31,10 +32,6 @@ module spi_host
   output logic [3:0]       cio_sd_en_o,
   input        [3:0]       cio_sd_i,
 
-  // Passthrough interface
-  input  spi_device_pkg::passthrough_req_t passthrough_i,
-  output spi_device_pkg::passthrough_rsp_t passthrough_o,
-
   output logic             intr_error_o,
   output logic             intr_spi_event_o
 );
@@ -44,96 +41,39 @@ module spi_host
   spi_host_reg2hw_t reg2hw;
   spi_host_hw2reg_t hw2reg;
 
-  tlul_pkg::tl_h2d_t fifo_win_h2d [1];
-  tlul_pkg::tl_d2h_t fifo_win_d2h [1];
+  reg_req_t fifo_win_h2d;
+  reg_rsp_t fifo_win_d2h;
 
   // Register module
-  spi_host_reg_top u_reg (
+  spi_host_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
-    .tl_i       (tl_i),
-    .tl_o       (tl_o),
-    .tl_win_o   (fifo_win_h2d),
-    .tl_win_i   (fifo_win_d2h),
+    .reg_req_i,
+    .reg_rsp_o,
+    .reg_req_win_o (fifo_win_h2d),
+    .reg_rsp_win_i (fifo_win_d2h),
     .reg2hw,
     .hw2reg,
-    .intg_err_o (),
     .devmode_i  (1'b1)
   );
 
-
   logic             sck;
   logic [NumCS-1:0] csb;
   logic [3:0]       sd_out;
   logic [3:0]       sd_en;
   logic [3:0]       sd_i;
 
-  if (NumCS == 1) begin : gen_passthrough_implementation
-    logic passthrough_en;
-    assign passthrough_en  = passthrough_i.passthrough_en;
-
-    logic        pt_sck;
-    logic        pt_sck_en;
-    logic [0:0]  pt_csb;
-    logic [0:0]  pt_csb_en;
-    logic [3:0]  pt_sd_out;
-    logic [3:0]  pt_sd_en;
-
-    assign pt_sck       = passthrough_i.sck;
-    assign pt_sck_en    = passthrough_i.sck_en;
-    assign pt_csb[0]    = passthrough_i.csb;
-    assign pt_csb_en[0] = passthrough_i.csb_en;
-    assign pt_sd_out    = passthrough_i.s;
-    assign pt_sd_en     = passthrough_i.s_en;
-
-    assign cio_sck_o    = passthrough_en ? pt_sck    : sck;
-    assign cio_sck_en_o = passthrough_en ? pt_sck_en : 1'b1;
-    assign cio_csb_o    = passthrough_en ? pt_csb    : csb;
-    assign cio_csb_en_o = passthrough_en ? pt_csb_en : 1'b1;
-    assign cio_sd_o     = passthrough_en ? pt_sd_out : sd_out;
-    assign cio_sd_en_o  = passthrough_en ? pt_sd_en  : sd_en;
-
-  end                   : gen_passthrough_implementation
-  else begin            : gen_passthrough_ignore
-     // Passthrough only supported for instances with one CSb line
-    `ASSERT(PassthroughNumCSCompat_A, !passthrough_i.passthrough_en, clk_i, rst_ni)
-
-    assign cio_sck_o    = sck;
-    assign cio_sck_en_o = 1'b1;
-    assign cio_csb_o    = csb;
-    assign cio_csb_en_o = {NumCS{1'b1}};
-    assign cio_sd_o     = sd_out;
-    assign cio_sd_en_o  = sd_en;
-
-    logic       unused_pt_en;
-    logic       unused_pt_sck;
-    logic       unused_pt_sck_en;
-    logic       unused_pt_csb;
-    logic       unused_pt_csb_en;
-    logic [3:0] unused_pt_sd_out;
-    logic [3:0] unused_pt_sd_en;
-
-    assign unused_pt_en     = passthrough_i.passthrough_en;
-    assign unused_pt_sck    = passthrough_i.sck;
-    assign unused_pt_sck_en = passthrough_i.sck_en;
-    assign unused_pt_csb    = passthrough_i.csb;
-    assign unused_pt_csb_en = passthrough_i.csb_en;
-    assign unused_pt_sd_out = passthrough_i.s;
-    assign unused_pt_sd_en  = passthrough_i.s_en;
-
-  end                   : gen_passthrough_ignore
-
-  logic unused_pt_sck_gate_en;
-  assign unused_pt_sck_gate_en = passthrough_i.sck_gate_en;
-
-  assign passthrough_o.s = cio_sd_i;
-  assign sd_i            = cio_sd_i;
-
-  // TODO: REMOVE THIS CODE
-  // Temp tie-offs to silence lint warnings
-  logic unused_scan;
+  assign cio_sck_o    = sck;
+  assign cio_sck_en_o = 1'b1;
+  assign cio_csb_o    = csb;
+  assign cio_csb_en_o = {NumCS{1'b1}};
+  assign cio_sd_o     = sd_out;
+  assign cio_sd_en_o  = sd_en;
 
-  assign unused_scan = ^scanmode_i;
+  assign sd_i            = cio_sd_i;
 
   assign hw2reg.status.byteorder.d  = ByteOrder;
   assign hw2reg.status.byteorder.de = 1'b1;
@@ -151,8 +91,6 @@ module spi_host
   logic test_dir_inval;
   logic test_speed_inval;
 
-  logic [CSW-1:0] csid;
-
   assign test_csid_inval  = (reg2hw.csid.q >= NumCS);
 
   always_comb begin
@@ -164,7 +102,7 @@ module spi_host
         test_speed_inval = 1'b0;
       end
       Dual, Quad: begin
-        test_dir_inval   = (reg2hw.command.direction.q != Bidir);
+        test_dir_inval   = (reg2hw.command.direction.q == Bidir);
         test_speed_inval = 1'b0;
       end
       default: begin
@@ -191,25 +129,35 @@ module spi_host
     endcase
   end
 
-  assign csid             = (test_csid_inval) ? '0 : reg2hw.csid.q[CSW-1:0];
   assign error_csid_inval = command_valid & ~command_busy &
                             test_csid_inval;
   assign error_cmd_inval  = command_valid & ~command_busy &
                             (test_speed_inval | test_dir_inval);
 
-  assign command.configopts.clkdiv    = reg2hw.configopts[csid].clkdiv.q;
-  assign command.configopts.csnidle   = reg2hw.configopts[csid].csnidle.q;
-  assign command.configopts.csnlead   = reg2hw.configopts[csid].csnlead.q;
-  assign command.configopts.csntrail  = reg2hw.configopts[csid].csntrail.q;
-  assign command.configopts.full_cyc  = reg2hw.configopts[csid].fullcyc.q;
-  assign command.configopts.cpha      = reg2hw.configopts[csid].cpha.q;
-  assign command.configopts.cpol      = reg2hw.configopts[csid].cpol.q;
+  spi_host_reg_pkg::spi_host_reg2hw_configopts_mreg_t configopts;
+
+  if (NumCS == 1) begin : gen_single_device
+    assign configopts   = reg2hw.configopts[0];
+    assign command.csid = '0;
+  end else begin : gen_multiple_devices
+    logic [CSW-1:0] csid;
+    assign csid         = (test_csid_inval) ? '0 : reg2hw.csid.q[CSW-1:0];
+    assign configopts   = reg2hw.configopts[csid];
+    assign command.csid = csid;
+  end : gen_multiple_devices
+
+  assign command.configopts.clkdiv   = configopts.clkdiv.q;
+  assign command.configopts.csnidle  = configopts.csnidle.q;
+  assign command.configopts.csnlead  = configopts.csnlead.q;
+  assign command.configopts.csntrail = configopts.csntrail.q;
+  assign command.configopts.full_cyc = configopts.fullcyc.q;
+  assign command.configopts.cpha     = configopts.cpha.q;
+  assign command.configopts.cpol     = configopts.cpol.q;
 
-  assign command.segment.len          = reg2hw.command.len.q;
-  assign command.segment.csaat        = reg2hw.command.csaat.q;
-  assign command.segment.speed        = reg2hw.command.speed.q;
+  assign command.segment.len         = reg2hw.command.len.q;
+  assign command.segment.csaat       = reg2hw.command.csaat.q;
+  assign command.segment.speed       = reg2hw.command.speed.q;
 
-  assign command.csid                 = csid[CSW-1:0];
 
   logic [3:0] cmd_qes;
 
@@ -272,11 +220,14 @@ module spi_host
   logic        rx_valid;
   logic        rx_ready;
 
-  spi_host_window u_window (
+  spi_host_window #(
+    .reg_req_t  (reg_req_t),
+    .reg_rsp_t  (reg_rsp_t)
+  ) u_window (
     .clk_i,
     .rst_ni,
-    .win_i      (fifo_win_h2d[0]),
-    .win_o      (fifo_win_d2h[0]),
+    .win_i      (fifo_win_h2d),
+    .win_o      (fifo_win_d2h),
     .tx_data_o  (tx_data),
     .tx_be_o    (tx_be),
     .tx_valid_o (tx_valid),
@@ -561,8 +512,6 @@ module spi_host
   );
 
 
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
   `ASSERT_KNOWN(CioSckKnownO_A, cio_sck_o)
   `ASSERT_KNOWN(CioSckEnKnownO_A, cio_sck_en_o)
   `ASSERT_KNOWN(CioCsbKnownO_A, cio_csb_o)
diff --git a/hw/ip/spi_host/rtl/spi_host_data_cdc.sv b/hw/ip/spi_host/rtl/spi_host_data_cdc.sv
index 07fad09ac..347f35e21 100644
--- a/hw/ip/spi_host/rtl/spi_host_data_cdc.sv
+++ b/hw/ip/spi_host/rtl/spi_host_data_cdc.sv
@@ -116,12 +116,12 @@ module spi_host_data_cdc #(
     assign tx_data_be_async_fifo = tx_data_be;
     assign tx_valid_async_fifo   = tx_valid_i;
     assign tx_ready_o            = tx_ready_async_fifo;
-    assign tx_depth_total        = byte'(tx_depth_async_fifo);
+    assign tx_depth_total        = 8'(tx_depth_async_fifo);
 
   end else begin : gen_tx_async_plus_sync
 
     logic [TxSyncDepthW-1:0] tx_depth_sync_fifo;
-    assign tx_depth_total = byte'(tx_depth_async_fifo) + byte'(tx_depth_sync_fifo);
+    assign tx_depth_total = 8'(tx_depth_async_fifo) + 8'(tx_depth_sync_fifo);
 
     prim_fifo_sync #(
       .Width(36),
@@ -187,12 +187,12 @@ module spi_host_data_cdc #(
     assign rx_data_unordered   = rx_data_async_fifo;
     assign rx_valid_o          = rx_valid_async_fifo;
     assign rx_ready_async_fifo = rx_ready_i;
-    assign rx_depth_total      = byte'(rx_depth_async_fifo);
+    assign rx_depth_total      = 8'(rx_depth_async_fifo);
 
   end else begin : gen_rx_async_plus_sync
 
     logic [RxSyncDepthW-1:0] rx_depth_sync_fifo;
-    assign rx_depth_total = byte'(rx_depth_async_fifo) + byte'(rx_depth_sync_fifo);
+    assign rx_depth_total = 8'(rx_depth_async_fifo) + 8'(rx_depth_sync_fifo);
 
     prim_fifo_sync #(
       .Width(32),
diff --git a/hw/ip/spi_host/rtl/spi_host_fsm.sv b/hw/ip/spi_host/rtl/spi_host_fsm.sv
index 7ad88540b..3e01bff99 100644
--- a/hw/ip/spi_host/rtl/spi_host_fsm.sv
+++ b/hw/ip/spi_host/rtl/spi_host_fsm.sv
@@ -5,6 +5,8 @@
 // Core Implemenation module for Serial Peripheral Interface (SPI) Host IP.
 //
 
+`include "common_cells/assertions.svh"
+
 module spi_host_fsm
   import spi_host_cmd_pkg::*;
 #(
@@ -84,7 +86,7 @@ module spi_host_fsm
 
   logic wr_en_internal, rd_en_internal, sample_en_internal, shift_en_internal;
 
-  logic stall;
+  logic stall, stall_q;
 
   assign stall = rx_stall_o | tx_stall_o;
 
@@ -104,7 +106,38 @@ module spi_host_fsm
     CSBSwitch,
     IdleCSBActive
   } spi_host_st_e;
-  spi_host_st_e spi_host_st_q, spi_host_st_d;
+
+  // The FSM stall mechanism halts the FSM by preventing the update of any internal registers.
+  // Since most register data values in this do not actually depend on the stall signal, this
+  // means that the stall signal is routed to the enable line of the corresponding flop but does
+  // not influence the and flip-flop data (_d) signals.
+  //
+  // This is not the case for the main FSM state variable, where there there is actually a logical
+  // cyclical dependency to worry about.  The stall variable depends on the FSM state, because an
+  // empty/full data FIFO only stalls the FSM when during states where data is needed from the
+  // FIFO.  Meanwhile, the FSM state depends on the stall variable through the `command_ready_o`
+  // signal. We only want to start processing an incoming command when it has been acknowledged,
+  // and we don't want to acknowledge the next command during a stall condition.
+  //
+  // Linting reports this cyclical dependency as unoptimizable and simulations can hang
+  // if this is not resolved.
+  //
+  // In principle, this cyclical dependency could possibly be broken through careful analysis of
+  // the logical dependencies between these three signals.  However, this may become a
+  // developmental challenge as we revise and debug this block.  So instead we take a simpler
+  // approach of breaking this combinational logic loop with a second FSM state register.
+  //
+  // That said there are then two copies of the FSM state variable
+  // Actual:   The true state of the FSM, which controls the peripheral IOs and the interactions with
+  //           the other blocks.
+  // Prestall: The "tentative" state of the FSM, which can be overridden by stall events. Normally
+  //           this matches the actual state. However when a stall event is recieved, the actual
+  //           state remains unchanged.  Once the stall event is resolved, the actual state is
+  //           updated to match the prestall state.
+  //
+  // The prestall state variable has no combinational logic dependency on the stall signal.
+
+  spi_host_st_e prestall_st_q, prestall_st_d, actual_st_d, actual_st_q;
 
   assign new_command     = command_valid_i && command_ready_o;
   assign switch_required = command_valid_i && (command_i.csid != csid_q);
@@ -156,7 +189,7 @@ module spi_host_fsm
     end
   end
 
-  assign isIdle     = (spi_host_st_q == Idle) || (spi_host_st_q == IdleCSBActive);
+  assign isIdle     = (actual_st_q == Idle) || (actual_st_q == IdleCSBActive);
 
   assign active_o   = ~isIdle;
 
@@ -172,55 +205,67 @@ module spi_host_fsm
   assign clk_cntr_en = en_i;
   assign fsm_en = (clk_cntr_en && clk_cntr_q == 0);
 
+  // FSM main body: Controls state transitions and command_ready_o signaling
+  //
+  // command_ready_o Note: New commands should may be acknowled as we enter into the idle condition
+  // with two subtle exceptions:
+  //   1. During stall conditions the FSM does not actually perform transitions and so
+  //      command_ready_o should be held low during stalls regardless of the current state
+  //   2. In cases where the next segment is for a different CSID, command_ready_o is held
+  //      explicitly low to enforce CSNTRAIL, CSIDLE requirements for the previous segment.
+  //      Holding command_ready_o low in this case defers updates of the internal state variables
   always_comb begin
-    spi_host_st_d = spi_host_st_q;
+    prestall_st_d = actual_st_q;
     command_ready_o = 1'b0;
     if (sw_rst_i) begin
-      spi_host_st_d = Idle;
+      prestall_st_d = Idle;
+    end else if (stall_q) begin
+      prestall_st_d = prestall_st_q;
     end else if (fsm_en) begin
-      unique case (spi_host_st_q)
+      unique case (actual_st_q)
         Idle: begin
           // Initial state, wait for commands.
           command_ready_o = 1'b1;
           if (command_valid_i) begin
             if (command_i.csid != csid_q) begin
-              spi_host_st_d = CSBSwitch;
+              prestall_st_d = CSBSwitch;
             end else begin
-              spi_host_st_d = WaitLead;
+              prestall_st_d = WaitLead;
             end
           end
         end
         WaitLead: begin
           // Transaction lead: CSB is low, waiting to start sck pulses.
           if (lead_cntr_q == 4'h0) begin
-            spi_host_st_d = InternalClkHigh;
+            prestall_st_d = InternalClkHigh;
           end
         end
         InternalClkLow: begin
           // One of two active clock states. sck is low when CPOL=0.
-          spi_host_st_d = InternalClkHigh;
+          prestall_st_d = InternalClkHigh;
         end
         InternalClkHigh: begin
           // One of two active clock states. sck is low when CPOL=0.
           // Typically often the last state in a command, and so the next state depends on CSAAT,
           // and of CSAAT is asserted, the details of the subsequent command.
           if (!last_bit || !last_byte) begin
-            spi_host_st_d = InternalClkLow;
-          end else if (command_i.segment.csaat) begin
-            spi_host_st_d = WaitTrail;
+            prestall_st_d = InternalClkLow;
+          // Check value of csaat for the previously submitted segment
+          end else if (!csaat_q) begin
+            prestall_st_d = WaitTrail;
           end else if (!command_valid_i) begin
-            spi_host_st_d = IdleCSBActive;
+            prestall_st_d = IdleCSBActive;
           end else if (command_i.csid != csid_q) begin
-            spi_host_st_d = WaitTrail;
+            prestall_st_d = WaitTrail;
           end else begin
             command_ready_o  = 1'b1;
-            spi_host_st_d = InternalClkLow;
+            prestall_st_d = InternalClkLow;
           end
         end
         WaitTrail: begin
           // Prepare to enter CSB high idle state by waiting csntrail cycles.
           if (trail_cntr_q == 4'h0) begin
-            spi_host_st_d = WaitIdle;
+            prestall_st_d = WaitIdle;
           end
         end
         WaitIdle: begin
@@ -230,12 +275,12 @@ module spi_host_fsm
             command_ready_o = 1'b1;
             if (command_valid_i) begin
               if (switch_required) begin
-                 spi_host_st_d = CSBSwitch;
+                 prestall_st_d = CSBSwitch;
               end else begin
-                 spi_host_st_d = WaitLead;
+                 prestall_st_d = WaitLead;
               end
             end else begin
-              spi_host_st_d = Idle;
+              prestall_st_d = Idle;
             end
           end
         end
@@ -244,9 +289,9 @@ module spi_host_fsm
           // CPOL and clkdiv settings, as well as guarantee that the idle delay requirements have
           // been observed for the new device.
           if (idle_cntr_q == 4'h0) begin
-            spi_host_st_d = WaitLead;
+            prestall_st_d = WaitLead;
           end else begin
-            spi_host_st_d = WaitIdle;
+            prestall_st_d = CSBSwitch;
           end
         end
         IdleCSBActive: begin
@@ -255,14 +300,14 @@ module spi_host_fsm
             if (command_i.csid != csid_q) begin
               // New command received, but for a different CSID than the last.  Deactivate CSB,
               // while still adhering to trail and idle time requirements
-              spi_host_st_d = WaitTrail;
+              prestall_st_d = WaitTrail;
               // Explicitly delay command_ready until the end of WaitIdle.  We need to observe
               // the trail time requirements for the current CSID, so we can't update our
               // configopts until CSB is high.
               command_ready_o = 1'b0;
             end else begin
               command_ready_o = 1'b1;
-              spi_host_st_d = InternalClkLow;
+              prestall_st_d = InternalClkLow;
             end
           end else begin
             command_ready_o = 1'b1;
@@ -270,7 +315,7 @@ module spi_host_fsm
         end
         default: begin
           command_ready_o  = 1'b0;
-          spi_host_st_d = Idle;
+          prestall_st_d = Idle;
         end
       endcase
     end
@@ -278,27 +323,45 @@ module spi_host_fsm
 
   // All register updates freeze when a stall is detected.
   // The definition of the stall signal looks ahead to determine whether a conflict is looming.
-  // Thus stall depends on spi_host_st_d.  Making spi_host_st_d depend on stall
+  // Thus stall depends on actual_st_d.  Making the actual state depend on stall
   // would create a circular logic loop, and lint errors.  Therefore stall is applied here, not
   // in the previous always_comb block;
+
+  logic stall_resolve;
+
+  assign stall_resolve = !stall && stall_q;
+  assign actual_st_d   = stall         ? actual_st_q :
+                         stall_resolve ? prestall_st_q :
+                         prestall_st_d;
+
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
-      spi_host_st_q <= Idle;
-      clk_cntr_q    <= 16'h0;
+      actual_st_q         <= Idle;
+      prestall_st_q       <= Idle;
+      clk_cntr_q          <= 16'h0;
+      stall_q             <= 1'b0;
     end else begin
-      spi_host_st_q <= stall ? spi_host_st_q : spi_host_st_d;
-      clk_cntr_q    <= stall ? clk_cntr_q : clk_cntr_d;
+      stall_q             <= stall;
+      prestall_st_q       <= prestall_st_d;
+      actual_st_q         <= actual_st_d;
+      clk_cntr_q          <= stall ? clk_cntr_q : clk_cntr_d;
     end
   end
 
-  assign state_changing = (spi_host_st_q != spi_host_st_d);
+  assign state_changing = (actual_st_q != prestall_st_d);
+
+  // The stall signal depends on byte_starting, and since acutal_st_d depends on stall,
+  // byte_starting_cpha0 is based off prestall_st_d.   In the event of a stall
+  // byte_starting may be high for multiple cycles until the stall is resolved.
+  // The rd_en_o and wr_en_o signals held low during a stall, thus the control signals
+  // sent to the byte_merge and byte_sleect blocks are active for only one cycle.
   assign byte_starting_cpha0 = ~sw_rst_i & state_changing &
-                               ((spi_host_st_d == WaitLead) |
-                                (spi_host_st_d == InternalClkLow & bit_cntr_q==0));
+                               ((prestall_st_d == WaitLead) |
+                                (prestall_st_d == InternalClkLow & bit_cntr_q==0));
   assign bit_shifting_cpha0  = ~sw_rst_i & state_changing &
-                               (spi_host_st_d == InternalClkLow & bit_cntr_q != 0);
+                               (actual_st_d == InternalClkLow & bit_cntr_q != 0);
   assign byte_ending_cpha0   = ~sw_rst_i & state_changing &
-                               (spi_host_st_q == InternalClkHigh & bit_cntr_q == 0);
+                               (actual_st_q == InternalClkHigh & bit_cntr_q == 0);
 
   // We can calculate byte transitions for CHPA=1 by noting
   // that in this implmentation, the sck edges have a 1-1
@@ -376,7 +439,7 @@ module spi_host_fsm
                        byte_ending ? byte_cntr_q - 1 :
                        byte_cntr_q;
 
-  assign lead_starting = state_changing && spi_host_st_d == WaitLead;
+  assign lead_starting = state_changing && actual_st_d == WaitLead;
 
   assign lead_cntr_d = sw_rst_i         ? 4'h0 :
                        !fsm_en          ? lead_cntr_q :
@@ -384,7 +447,7 @@ module spi_host_fsm
                        lead_cntr_q == 0 ? 4'h0 :
                        lead_cntr_q - 1;
 
-  assign trail_starting = state_changing && spi_host_st_d == WaitTrail;
+  assign trail_starting = state_changing && actual_st_d == WaitTrail;
 
   assign trail_cntr_d = sw_rst_i          ? 4'h0 :
                         !fsm_en           ? trail_cntr_q :
@@ -393,8 +456,8 @@ module spi_host_fsm
                         trail_cntr_q - 1;
 
   assign idle_starting = state_changing &&
-                        (spi_host_st_d == WaitIdle ||
-                         spi_host_st_d == CSBSwitch);
+                        (actual_st_d == WaitIdle ||
+                         actual_st_d == CSBSwitch);
 
   assign idle_cntr_d = sw_rst_i         ? 4'h0 :
                        !fsm_en          ? idle_cntr_q :
@@ -420,16 +483,16 @@ module spi_host_fsm
 
   assign wr_en_internal    = byte_starting & cmd_wr_en;
   assign shift_en_internal = bit_shifting;
-  assign rd_en_internal    = byte_ending & cmd_rd_en;
+  assign rd_en_internal    = byte_ending & cmd_rd_en_q;
   assign speed_o           = cmd_speed;
   assign sample_en_d       = byte_starting | shift_en_o;
   assign full_cyc_o        = full_cyc;
-  assign cmd_end_o         = (byte_cntr_q == 'h0);
+  assign cmd_end_o         = (byte_cntr_q == 'h1) & wr_en_o & sr_wr_ready_i;
 
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       sample_en_q <= 1'b0;
-      sample_en_q2 <= 1'b00;
+      sample_en_q2 <= 1'b0;
     end else begin
       sample_en_q  <= (fsm_en && !stall) ? sample_en_d : sample_en_q;
       sample_en_q2 <= (fsm_en && !stall) ? sample_en_q : sample_en_q2;
@@ -439,7 +502,7 @@ module spi_host_fsm
   assign sample_en_internal = full_cyc_o ? sample_en_q2 : sample_en_q;
 
   always_comb begin
-    unique case (spi_host_st_d)
+    unique case (actual_st_d)
       WaitLead, InternalClkLow, InternalClkHigh, IdleCSBActive, WaitTrail:
         csb_single_d = 1'b0;
       default:
@@ -447,8 +510,8 @@ module spi_host_fsm
     endcase
   end
 
-  assign sck_d = cpol ? (spi_host_st_d != InternalClkHigh) :
-                        (spi_host_st_d == InternalClkHigh);
+  assign sck_d = cpol ? (actual_st_d != InternalClkHigh) :
+                        (actual_st_d == InternalClkHigh);
 
   assign sck_o = sck_q;
 
@@ -456,12 +519,12 @@ module spi_host_fsm
     always_ff @(posedge clk_i or negedge rst_ni) begin
       if (!rst_ni) begin
         csb_q[ii] <= 1'b1;
-        sck_q     <= 1'b0;
+        if (ii == 0) sck_q     <= 1'b0;
       end else begin
         csb_q[ii] <= (csid != ii) ? 1'b1 :
                      !stall       ? csb_single_d :
                      csb_q[ii];
-        sck_q     <= !stall ? sck_d : sck_q;
+        if (ii == 0) sck_q     <= !stall ? sck_d : sck_q;
       end
     end
   end : gen_csb_gen
@@ -474,7 +537,7 @@ module spi_host_fsm
     end else begin
       unique case (cmd_speed)
         Standard: begin
-          sd_en_o[0]   = 1'b1;
+          sd_en_o[0]   = cmd_wr_en;
           sd_en_o[1]   = 1'b0;
           sd_en_o[3:2] = 2'b00;
         end
@@ -497,8 +560,8 @@ module spi_host_fsm
   // Assertions confirming valid user input.
   //
 
-  `ASSERT(BidirOnlyInStdMode_A, cmd_speed == Standard || !(cmd_rd_en && cmd_wr_en), clk_i, rst_ni)
-  `ASSERT(ValidSpeed_A, cmd_speed != RsvdSpd, clk_i, rst_ni)
-  `ASSERT(ValidCSID_A, csid < NumCS, clk_i, rst_ni)
+  `ASSERT(BidirOnlyInStdMode_A, $isunknown(rst_ni) || (cmd_speed == Standard || !(cmd_rd_en && cmd_wr_en)), clk_i, rst_ni)
+  `ASSERT(ValidSpeed_A, $isunknown(rst_ni) || (cmd_speed != RsvdSpd), clk_i, rst_ni)
+  `ASSERT(ValidCSID_A, $isunknown(rst_ni) || (csid < NumCS), clk_i, rst_ni)
 
 endmodule
diff --git a/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv b/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv
index 29be73130..c519d9f65 100644
--- a/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv
+++ b/hw/ip/spi_host/rtl/spi_host_reg_pkg.sv
@@ -8,9 +8,10 @@ package spi_host_reg_pkg;
 
   // Param list
   parameter logic ByteOrder = 1;
-  parameter int NumCS = 1;
+  parameter int NumCS = 2;
   parameter int TxDepth = 72;
   parameter int RxDepth = 64;
+  parameter int NumAlerts = 1;
 
   // Address widths within the block
   parameter int BlockAw = 6;
@@ -48,6 +49,11 @@ package spi_host_reg_pkg;
     } spi_event;
   } spi_host_reg2hw_intr_test_reg_t;
 
+  typedef struct packed {
+    logic        q;
+    logic        qe;
+  } spi_host_reg2hw_alert_test_reg_t;
+
   typedef struct packed {
     struct packed {
       logic [7:0]  q;
@@ -55,9 +61,6 @@ package spi_host_reg_pkg;
     struct packed {
       logic [7:0]  q;
     } tx_watermark;
-    struct packed {
-      logic        q;
-    } passthru;
     struct packed {
       logic        q;
     } sw_rst;
@@ -261,11 +264,12 @@ package spi_host_reg_pkg;
 
   // Register -> HW type
   typedef struct packed {
-    spi_host_reg2hw_intr_state_reg_t intr_state; // [123:122]
-    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [121:120]
-    spi_host_reg2hw_intr_test_reg_t intr_test; // [119:116]
-    spi_host_reg2hw_control_reg_t control; // [115:97]
-    spi_host_reg2hw_configopts_mreg_t [0:0] configopts; // [96:66]
+    spi_host_reg2hw_intr_state_reg_t intr_state; // [155:154]
+    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [153:152]
+    spi_host_reg2hw_intr_test_reg_t intr_test; // [151:148]
+    spi_host_reg2hw_alert_test_reg_t alert_test; // [147:146]
+    spi_host_reg2hw_control_reg_t control; // [145:128]
+    spi_host_reg2hw_configopts_mreg_t [1:0] configopts; // [127:66]
     spi_host_reg2hw_csid_reg_t csid; // [65:34]
     spi_host_reg2hw_command_reg_t command; // [33:16]
     spi_host_reg2hw_error_enable_reg_t error_enable; // [15:11]
@@ -284,22 +288,26 @@ package spi_host_reg_pkg;
   parameter logic [BlockAw-1:0] SPI_HOST_INTR_STATE_OFFSET = 6'h 0;
   parameter logic [BlockAw-1:0] SPI_HOST_INTR_ENABLE_OFFSET = 6'h 4;
   parameter logic [BlockAw-1:0] SPI_HOST_INTR_TEST_OFFSET = 6'h 8;
-  parameter logic [BlockAw-1:0] SPI_HOST_CONTROL_OFFSET = 6'h c;
-  parameter logic [BlockAw-1:0] SPI_HOST_STATUS_OFFSET = 6'h 10;
-  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_OFFSET = 6'h 14;
-  parameter logic [BlockAw-1:0] SPI_HOST_CSID_OFFSET = 6'h 18;
-  parameter logic [BlockAw-1:0] SPI_HOST_COMMAND_OFFSET = 6'h 1c;
-  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_ENABLE_OFFSET = 6'h 24;
-  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_STATUS_OFFSET = 6'h 28;
-  parameter logic [BlockAw-1:0] SPI_HOST_EVENT_ENABLE_OFFSET = 6'h 2c;
+  parameter logic [BlockAw-1:0] SPI_HOST_ALERT_TEST_OFFSET = 6'h c;
+  parameter logic [BlockAw-1:0] SPI_HOST_CONTROL_OFFSET = 6'h 10;
+  parameter logic [BlockAw-1:0] SPI_HOST_STATUS_OFFSET = 6'h 14;
+  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_0_OFFSET = 6'h 18;
+  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_1_OFFSET = 6'h 1c;
+  parameter logic [BlockAw-1:0] SPI_HOST_CSID_OFFSET = 6'h 20;
+  parameter logic [BlockAw-1:0] SPI_HOST_COMMAND_OFFSET = 6'h 24;
+  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_ENABLE_OFFSET = 6'h 2c;
+  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_STATUS_OFFSET = 6'h 30;
+  parameter logic [BlockAw-1:0] SPI_HOST_EVENT_ENABLE_OFFSET = 6'h 34;
 
   // Reset values for hwext registers and their fields
   parameter logic [1:0] SPI_HOST_INTR_TEST_RESVAL = 2'h 0;
   parameter logic [0:0] SPI_HOST_INTR_TEST_ERROR_RESVAL = 1'h 0;
   parameter logic [0:0] SPI_HOST_INTR_TEST_SPI_EVENT_RESVAL = 1'h 0;
+  parameter logic [0:0] SPI_HOST_ALERT_TEST_RESVAL = 1'h 0;
+  parameter logic [0:0] SPI_HOST_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;
 
   // Window parameters
-  parameter logic [BlockAw-1:0] SPI_HOST_DATA_OFFSET = 6'h 20;
+  parameter logic [BlockAw-1:0] SPI_HOST_DATA_OFFSET = 6'h 28;
   parameter int unsigned        SPI_HOST_DATA_SIZE   = 'h 4;
 
   // Register index
@@ -307,9 +315,11 @@ package spi_host_reg_pkg;
     SPI_HOST_INTR_STATE,
     SPI_HOST_INTR_ENABLE,
     SPI_HOST_INTR_TEST,
+    SPI_HOST_ALERT_TEST,
     SPI_HOST_CONTROL,
     SPI_HOST_STATUS,
-    SPI_HOST_CONFIGOPTS,
+    SPI_HOST_CONFIGOPTS_0,
+    SPI_HOST_CONFIGOPTS_1,
     SPI_HOST_CSID,
     SPI_HOST_COMMAND,
     SPI_HOST_ERROR_ENABLE,
@@ -318,18 +328,20 @@ package spi_host_reg_pkg;
   } spi_host_id_e;
 
   // Register width information to check illegal writes
-  parameter logic [3:0] SPI_HOST_PERMIT [11] = '{
+  parameter logic [3:0] SPI_HOST_PERMIT [13] = '{
     4'b 0001, // index[ 0] SPI_HOST_INTR_STATE
     4'b 0001, // index[ 1] SPI_HOST_INTR_ENABLE
     4'b 0001, // index[ 2] SPI_HOST_INTR_TEST
-    4'b 1111, // index[ 3] SPI_HOST_CONTROL
-    4'b 1111, // index[ 4] SPI_HOST_STATUS
-    4'b 1111, // index[ 5] SPI_HOST_CONFIGOPTS
-    4'b 1111, // index[ 6] SPI_HOST_CSID
-    4'b 0011, // index[ 7] SPI_HOST_COMMAND
-    4'b 0001, // index[ 8] SPI_HOST_ERROR_ENABLE
-    4'b 0001, // index[ 9] SPI_HOST_ERROR_STATUS
-    4'b 0001  // index[10] SPI_HOST_EVENT_ENABLE
+    4'b 0001, // index[ 3] SPI_HOST_ALERT_TEST
+    4'b 1111, // index[ 4] SPI_HOST_CONTROL
+    4'b 1111, // index[ 5] SPI_HOST_STATUS
+    4'b 1111, // index[ 6] SPI_HOST_CONFIGOPTS_0
+    4'b 1111, // index[ 7] SPI_HOST_CONFIGOPTS_1
+    4'b 1111, // index[ 8] SPI_HOST_CSID
+    4'b 0011, // index[ 9] SPI_HOST_COMMAND
+    4'b 0001, // index[10] SPI_HOST_ERROR_ENABLE
+    4'b 0001, // index[11] SPI_HOST_ERROR_STATUS
+    4'b 0001  // index[12] SPI_HOST_EVENT_ENABLE
   };
 
 endpackage
diff --git a/hw/ip/spi_host/rtl/spi_host_reg_top.sv b/hw/ip/spi_host/rtl/spi_host_reg_top.sv
index be224877f..748c97e5b 100644
--- a/hw/ip/spi_host/rtl/spi_host_reg_top.sv
+++ b/hw/ip/spi_host/rtl/spi_host_reg_top.sv
@@ -4,25 +4,27 @@
 //
 // Register Top module auto-generated by `reggen`
 
-`include "prim_assert.sv"
 
-module spi_host_reg_top (
+`include "common_cells/assertions.svh"
+
+module spi_host_reg_top #(
+    parameter type reg_req_t = logic,
+    parameter type reg_rsp_t = logic,
+    parameter int AW = 6
+) (
   input clk_i,
   input rst_ni,
-
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Output port for window
-  output tlul_pkg::tl_h2d_t tl_win_o  [1],
-  input  tlul_pkg::tl_d2h_t tl_win_i  [1],
+  output reg_req_t [1-1:0] reg_req_win_o,
+  input  reg_rsp_t [1-1:0] reg_rsp_win_i,
 
   // To HW
   output spi_host_reg_pkg::spi_host_reg2hw_t reg2hw, // Write
   input  spi_host_reg_pkg::spi_host_hw2reg_t hw2reg, // Read
 
-  // Integrity check errors
-  output logic intg_err_o,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -30,7 +32,6 @@ module spi_host_reg_top (
 
   import spi_host_reg_pkg::* ;
 
-  localparam int AW = 6;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -47,107 +48,62 @@ module spi_host_reg_top (
 
   logic [DW-1:0] reg_rdata_next;
 
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i,
-    .err_o(intg_err)
-  );
-
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
-    end
-  end
+  // Below register interface can be changed
+  reg_req_t  reg_intf_req;
+  reg_rsp_t  reg_intf_rsp;
 
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = intg_err_q | intg_err;
-
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o
-  );
 
-  tlul_pkg::tl_h2d_t tl_socket_h2d [2];
-  tlul_pkg::tl_d2h_t tl_socket_d2h [2];
+  logic [0:0] reg_steer;
 
-  logic [1:0] reg_steer;
+  reg_req_t [2-1:0] reg_intf_demux_req;
+  reg_rsp_t [2-1:0] reg_intf_demux_rsp;
 
-  // socket_1n connection
-  assign tl_reg_h2d = tl_socket_h2d[1];
-  assign tl_socket_d2h[1] = tl_reg_d2h;
+  // demux connection
+  assign reg_intf_req = reg_intf_demux_req[1];
+  assign reg_intf_demux_rsp[1] = reg_intf_rsp;
 
-  assign tl_win_o[0] = tl_socket_h2d[0];
-  assign tl_socket_d2h[0] = tl_win_i[0];
+  assign reg_req_win_o[0] = reg_intf_demux_req[0];
+  assign reg_intf_demux_rsp[0] = reg_rsp_win_i[0];
 
   // Create Socket_1n
-  tlul_socket_1n #(
-    .N          (2),
-    .HReqPass   (1'b1),
-    .HRspPass   (1'b1),
-    .DReqPass   ({2{1'b1}}),
-    .DRspPass   ({2{1'b1}}),
-    .HReqDepth  (4'h0),
-    .HRspDepth  (4'h0),
-    .DReqDepth  ({2{4'h0}}),
-    .DRspDepth  ({2{4'h0}})
-  ) u_socket (
+  reg_demux #(
+    .NoPorts  (2),
+    .req_t    (reg_req_t),
+    .rsp_t    (reg_rsp_t)
+  ) i_reg_demux (
     .clk_i,
     .rst_ni,
-    .tl_h_i (tl_i),
-    .tl_h_o (tl_o_pre),
-    .tl_d_o (tl_socket_h2d),
-    .tl_d_i (tl_socket_d2h),
-    .dev_select_i (reg_steer)
+    .in_req_i (reg_req_i),
+    .in_rsp_o (reg_rsp_o),
+    .out_req_o (reg_intf_demux_req),
+    .out_rsp_i (reg_intf_demux_rsp),
+    .in_select_i (reg_steer)
   );
 
+
   // Create steering logic
   always_comb begin
     reg_steer = 1;       // Default set to register
 
     // TODO: Can below codes be unique case () inside ?
-    if (tl_i.a_address[AW-1:0] >= 32 && tl_i.a_address[AW-1:0] < 36) begin
+    if (reg_req_i.addr[AW-1:0] >= 40 && reg_req_i.addr[AW-1:0] < 44) begin
       reg_steer = 0;
     end
-    if (intg_err) begin
-      reg_steer = 1;
-    end
   end
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(0)
-  ) u_reg_if (
-    .clk_i,
-    .rst_ni,
-
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
 
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
+
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -168,15 +124,14 @@ module spi_host_reg_top (
   logic intr_test_error_we;
   logic intr_test_spi_event_wd;
   logic intr_test_spi_event_we;
+  logic alert_test_wd;
+  logic alert_test_we;
   logic [7:0] control_rx_watermark_qs;
   logic [7:0] control_rx_watermark_wd;
   logic control_rx_watermark_we;
   logic [7:0] control_tx_watermark_qs;
   logic [7:0] control_tx_watermark_wd;
   logic control_tx_watermark_we;
-  logic control_passthru_qs;
-  logic control_passthru_wd;
-  logic control_passthru_we;
   logic control_sw_rst_qs;
   logic control_sw_rst_wd;
   logic control_sw_rst_we;
@@ -196,27 +151,48 @@ module spi_host_reg_top (
   logic status_txfull_qs;
   logic status_active_qs;
   logic status_ready_qs;
-  logic [15:0] configopts_clkdiv_0_qs;
-  logic [15:0] configopts_clkdiv_0_wd;
-  logic configopts_clkdiv_0_we;
-  logic [3:0] configopts_csnidle_0_qs;
-  logic [3:0] configopts_csnidle_0_wd;
-  logic configopts_csnidle_0_we;
-  logic [3:0] configopts_csntrail_0_qs;
-  logic [3:0] configopts_csntrail_0_wd;
-  logic configopts_csntrail_0_we;
-  logic [3:0] configopts_csnlead_0_qs;
-  logic [3:0] configopts_csnlead_0_wd;
-  logic configopts_csnlead_0_we;
-  logic configopts_fullcyc_0_qs;
-  logic configopts_fullcyc_0_wd;
-  logic configopts_fullcyc_0_we;
-  logic configopts_cpha_0_qs;
-  logic configopts_cpha_0_wd;
-  logic configopts_cpha_0_we;
-  logic configopts_cpol_0_qs;
-  logic configopts_cpol_0_wd;
-  logic configopts_cpol_0_we;
+  logic [15:0] configopts_0_clkdiv_0_qs;
+  logic [15:0] configopts_0_clkdiv_0_wd;
+  logic configopts_0_clkdiv_0_we;
+  logic [3:0] configopts_0_csnidle_0_qs;
+  logic [3:0] configopts_0_csnidle_0_wd;
+  logic configopts_0_csnidle_0_we;
+  logic [3:0] configopts_0_csntrail_0_qs;
+  logic [3:0] configopts_0_csntrail_0_wd;
+  logic configopts_0_csntrail_0_we;
+  logic [3:0] configopts_0_csnlead_0_qs;
+  logic [3:0] configopts_0_csnlead_0_wd;
+  logic configopts_0_csnlead_0_we;
+  logic configopts_0_fullcyc_0_qs;
+  logic configopts_0_fullcyc_0_wd;
+  logic configopts_0_fullcyc_0_we;
+  logic configopts_0_cpha_0_qs;
+  logic configopts_0_cpha_0_wd;
+  logic configopts_0_cpha_0_we;
+  logic configopts_0_cpol_0_qs;
+  logic configopts_0_cpol_0_wd;
+  logic configopts_0_cpol_0_we;
+  logic [15:0] configopts_1_clkdiv_1_qs;
+  logic [15:0] configopts_1_clkdiv_1_wd;
+  logic configopts_1_clkdiv_1_we;
+  logic [3:0] configopts_1_csnidle_1_qs;
+  logic [3:0] configopts_1_csnidle_1_wd;
+  logic configopts_1_csnidle_1_we;
+  logic [3:0] configopts_1_csntrail_1_qs;
+  logic [3:0] configopts_1_csntrail_1_wd;
+  logic configopts_1_csntrail_1_we;
+  logic [3:0] configopts_1_csnlead_1_qs;
+  logic [3:0] configopts_1_csnlead_1_wd;
+  logic configopts_1_csnlead_1_we;
+  logic configopts_1_fullcyc_1_qs;
+  logic configopts_1_fullcyc_1_wd;
+  logic configopts_1_fullcyc_1_we;
+  logic configopts_1_cpha_1_qs;
+  logic configopts_1_cpha_1_wd;
+  logic configopts_1_cpha_1_we;
+  logic configopts_1_cpol_1_qs;
+  logic configopts_1_cpol_1_wd;
+  logic configopts_1_cpol_1_we;
   logic [31:0] csid_qs;
   logic [31:0] csid_wd;
   logic csid_we;
@@ -422,6 +398,22 @@ module spi_host_reg_top (
   );
 
 
+  // R[alert_test]: V(True)
+
+  prim_subreg_ext #(
+    .DW    (1)
+  ) u_alert_test (
+    .re     (1'b0),
+    .we     (alert_test_we),
+    .wd     (alert_test_wd),
+    .d      ('0),
+    .qre    (),
+    .qe     (reg2hw.alert_test.qe),
+    .q      (reg2hw.alert_test.q ),
+    .qs     ()
+  );
+
+
   // R[control]: V(False)
 
   //   F[rx_watermark]: 7:0
@@ -476,32 +468,6 @@ module spi_host_reg_top (
   );
 
 
-  //   F[passthru]: 29:29
-  prim_subreg #(
-    .DW      (1),
-    .SWACCESS("RW"),
-    .RESVAL  (1'h0)
-  ) u_control_passthru (
-    .clk_i   (clk_i    ),
-    .rst_ni  (rst_ni  ),
-
-    // from register interface
-    .we     (control_passthru_we),
-    .wd     (control_passthru_wd),
-
-    // from internal hardware
-    .de     (1'b0),
-    .d      ('0  ),
-
-    // to internal hardware
-    .qe     (),
-    .q      (reg2hw.control.passthru.q ),
-
-    // to register interface (read)
-    .qs     (control_passthru_qs)
-  );
-
-
   //   F[sw_rst]: 30:30
   prim_subreg #(
     .DW      (1),
@@ -883,20 +849,20 @@ module spi_host_reg_top (
 
 
   // Subregister 0 of Multireg configopts
-  // R[configopts]: V(False)
+  // R[configopts_0]: V(False)
 
   // F[clkdiv_0]: 15:0
   prim_subreg #(
     .DW      (16),
     .SWACCESS("RW"),
     .RESVAL  (16'h0)
-  ) u_configopts_clkdiv_0 (
+  ) u_configopts_0_clkdiv_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_clkdiv_0_we),
-    .wd     (configopts_clkdiv_0_wd),
+    .we     (configopts_0_clkdiv_0_we),
+    .wd     (configopts_0_clkdiv_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -907,7 +873,7 @@ module spi_host_reg_top (
     .q      (reg2hw.configopts[0].clkdiv.q ),
 
     // to register interface (read)
-    .qs     (configopts_clkdiv_0_qs)
+    .qs     (configopts_0_clkdiv_0_qs)
   );
 
 
@@ -916,13 +882,13 @@ module spi_host_reg_top (
     .DW      (4),
     .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csnidle_0 (
+  ) u_configopts_0_csnidle_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_csnidle_0_we),
-    .wd     (configopts_csnidle_0_wd),
+    .we     (configopts_0_csnidle_0_we),
+    .wd     (configopts_0_csnidle_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -933,7 +899,7 @@ module spi_host_reg_top (
     .q      (reg2hw.configopts[0].csnidle.q ),
 
     // to register interface (read)
-    .qs     (configopts_csnidle_0_qs)
+    .qs     (configopts_0_csnidle_0_qs)
   );
 
 
@@ -942,13 +908,13 @@ module spi_host_reg_top (
     .DW      (4),
     .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csntrail_0 (
+  ) u_configopts_0_csntrail_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_csntrail_0_we),
-    .wd     (configopts_csntrail_0_wd),
+    .we     (configopts_0_csntrail_0_we),
+    .wd     (configopts_0_csntrail_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -959,7 +925,7 @@ module spi_host_reg_top (
     .q      (reg2hw.configopts[0].csntrail.q ),
 
     // to register interface (read)
-    .qs     (configopts_csntrail_0_qs)
+    .qs     (configopts_0_csntrail_0_qs)
   );
 
 
@@ -968,13 +934,13 @@ module spi_host_reg_top (
     .DW      (4),
     .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csnlead_0 (
+  ) u_configopts_0_csnlead_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_csnlead_0_we),
-    .wd     (configopts_csnlead_0_wd),
+    .we     (configopts_0_csnlead_0_we),
+    .wd     (configopts_0_csnlead_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -985,7 +951,7 @@ module spi_host_reg_top (
     .q      (reg2hw.configopts[0].csnlead.q ),
 
     // to register interface (read)
-    .qs     (configopts_csnlead_0_qs)
+    .qs     (configopts_0_csnlead_0_qs)
   );
 
 
@@ -994,13 +960,13 @@ module spi_host_reg_top (
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_fullcyc_0 (
+  ) u_configopts_0_fullcyc_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_fullcyc_0_we),
-    .wd     (configopts_fullcyc_0_wd),
+    .we     (configopts_0_fullcyc_0_we),
+    .wd     (configopts_0_fullcyc_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1011,7 +977,7 @@ module spi_host_reg_top (
     .q      (reg2hw.configopts[0].fullcyc.q ),
 
     // to register interface (read)
-    .qs     (configopts_fullcyc_0_qs)
+    .qs     (configopts_0_fullcyc_0_qs)
   );
 
 
@@ -1020,13 +986,13 @@ module spi_host_reg_top (
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_cpha_0 (
+  ) u_configopts_0_cpha_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_cpha_0_we),
-    .wd     (configopts_cpha_0_wd),
+    .we     (configopts_0_cpha_0_we),
+    .wd     (configopts_0_cpha_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1037,7 +1003,7 @@ module spi_host_reg_top (
     .q      (reg2hw.configopts[0].cpha.q ),
 
     // to register interface (read)
-    .qs     (configopts_cpha_0_qs)
+    .qs     (configopts_0_cpha_0_qs)
   );
 
 
@@ -1046,13 +1012,13 @@ module spi_host_reg_top (
     .DW      (1),
     .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_cpol_0 (
+  ) u_configopts_0_cpol_0 (
     .clk_i   (clk_i    ),
     .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_cpol_0_we),
-    .wd     (configopts_cpol_0_wd),
+    .we     (configopts_0_cpol_0_we),
+    .wd     (configopts_0_cpol_0_wd),
 
     // from internal hardware
     .de     (1'b0),
@@ -1063,7 +1029,192 @@ module spi_host_reg_top (
     .q      (reg2hw.configopts[0].cpol.q ),
 
     // to register interface (read)
-    .qs     (configopts_cpol_0_qs)
+    .qs     (configopts_0_cpol_0_qs)
+  );
+
+
+  // Subregister 1 of Multireg configopts
+  // R[configopts_1]: V(False)
+
+  // F[clkdiv_1]: 15:0
+  prim_subreg #(
+    .DW      (16),
+    .SWACCESS("RW"),
+    .RESVAL  (16'h0)
+  ) u_configopts_1_clkdiv_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_clkdiv_1_we),
+    .wd     (configopts_1_clkdiv_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].clkdiv.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_clkdiv_1_qs)
+  );
+
+
+  // F[csnidle_1]: 19:16
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csnidle_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csnidle_1_we),
+    .wd     (configopts_1_csnidle_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csnidle.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csnidle_1_qs)
+  );
+
+
+  // F[csntrail_1]: 23:20
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csntrail_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csntrail_1_we),
+    .wd     (configopts_1_csntrail_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csntrail.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csntrail_1_qs)
+  );
+
+
+  // F[csnlead_1]: 27:24
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csnlead_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csnlead_1_we),
+    .wd     (configopts_1_csnlead_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csnlead.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csnlead_1_qs)
+  );
+
+
+  // F[fullcyc_1]: 29:29
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_fullcyc_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_fullcyc_1_we),
+    .wd     (configopts_1_fullcyc_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].fullcyc.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_fullcyc_1_qs)
+  );
+
+
+  // F[cpha_1]: 30:30
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_cpha_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_cpha_1_we),
+    .wd     (configopts_1_cpha_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].cpha.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_cpha_1_qs)
+  );
+
+
+  // F[cpol_1]: 31:31
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_cpol_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_cpol_1_we),
+    .wd     (configopts_1_cpol_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].cpol.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_cpol_1_qs)
   );
 
 
@@ -1625,20 +1776,22 @@ module spi_host_reg_top (
 
 
 
-  logic [10:0] addr_hit;
+  logic [12:0] addr_hit;
   always_comb begin
     addr_hit = '0;
     addr_hit[ 0] = (reg_addr == SPI_HOST_INTR_STATE_OFFSET);
     addr_hit[ 1] = (reg_addr == SPI_HOST_INTR_ENABLE_OFFSET);
     addr_hit[ 2] = (reg_addr == SPI_HOST_INTR_TEST_OFFSET);
-    addr_hit[ 3] = (reg_addr == SPI_HOST_CONTROL_OFFSET);
-    addr_hit[ 4] = (reg_addr == SPI_HOST_STATUS_OFFSET);
-    addr_hit[ 5] = (reg_addr == SPI_HOST_CONFIGOPTS_OFFSET);
-    addr_hit[ 6] = (reg_addr == SPI_HOST_CSID_OFFSET);
-    addr_hit[ 7] = (reg_addr == SPI_HOST_COMMAND_OFFSET);
-    addr_hit[ 8] = (reg_addr == SPI_HOST_ERROR_ENABLE_OFFSET);
-    addr_hit[ 9] = (reg_addr == SPI_HOST_ERROR_STATUS_OFFSET);
-    addr_hit[10] = (reg_addr == SPI_HOST_EVENT_ENABLE_OFFSET);
+    addr_hit[ 3] = (reg_addr == SPI_HOST_ALERT_TEST_OFFSET);
+    addr_hit[ 4] = (reg_addr == SPI_HOST_CONTROL_OFFSET);
+    addr_hit[ 5] = (reg_addr == SPI_HOST_STATUS_OFFSET);
+    addr_hit[ 6] = (reg_addr == SPI_HOST_CONFIGOPTS_0_OFFSET);
+    addr_hit[ 7] = (reg_addr == SPI_HOST_CONFIGOPTS_1_OFFSET);
+    addr_hit[ 8] = (reg_addr == SPI_HOST_CSID_OFFSET);
+    addr_hit[ 9] = (reg_addr == SPI_HOST_COMMAND_OFFSET);
+    addr_hit[10] = (reg_addr == SPI_HOST_ERROR_ENABLE_OFFSET);
+    addr_hit[11] = (reg_addr == SPI_HOST_ERROR_STATUS_OFFSET);
+    addr_hit[12] = (reg_addr == SPI_HOST_EVENT_ENABLE_OFFSET);
   end
 
   assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
@@ -1656,7 +1809,9 @@ module spi_host_reg_top (
                (addr_hit[ 7] & (|(SPI_HOST_PERMIT[ 7] & ~reg_be))) |
                (addr_hit[ 8] & (|(SPI_HOST_PERMIT[ 8] & ~reg_be))) |
                (addr_hit[ 9] & (|(SPI_HOST_PERMIT[ 9] & ~reg_be))) |
-               (addr_hit[10] & (|(SPI_HOST_PERMIT[10] & ~reg_be)))));
+               (addr_hit[10] & (|(SPI_HOST_PERMIT[10] & ~reg_be))) |
+               (addr_hit[11] & (|(SPI_HOST_PERMIT[11] & ~reg_be))) |
+               (addr_hit[12] & (|(SPI_HOST_PERMIT[12] & ~reg_be)))));
   end
 
   assign intr_state_error_we = addr_hit[0] & reg_we & !reg_error;
@@ -1677,103 +1832,124 @@ module spi_host_reg_top (
   assign intr_test_spi_event_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_spi_event_wd = reg_wdata[1];
 
-  assign control_rx_watermark_we = addr_hit[3] & reg_we & !reg_error;
+  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
+  assign alert_test_wd = reg_wdata[0];
+
+  assign control_rx_watermark_we = addr_hit[4] & reg_we & !reg_error;
   assign control_rx_watermark_wd = reg_wdata[7:0];
 
-  assign control_tx_watermark_we = addr_hit[3] & reg_we & !reg_error;
+  assign control_tx_watermark_we = addr_hit[4] & reg_we & !reg_error;
   assign control_tx_watermark_wd = reg_wdata[15:8];
 
-  assign control_passthru_we = addr_hit[3] & reg_we & !reg_error;
-  assign control_passthru_wd = reg_wdata[29];
-
-  assign control_sw_rst_we = addr_hit[3] & reg_we & !reg_error;
+  assign control_sw_rst_we = addr_hit[4] & reg_we & !reg_error;
   assign control_sw_rst_wd = reg_wdata[30];
 
-  assign control_spien_we = addr_hit[3] & reg_we & !reg_error;
+  assign control_spien_we = addr_hit[4] & reg_we & !reg_error;
   assign control_spien_wd = reg_wdata[31];
 
-  assign configopts_clkdiv_0_we = addr_hit[5] & reg_we & !reg_error;
-  assign configopts_clkdiv_0_wd = reg_wdata[15:0];
+  assign configopts_0_clkdiv_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_clkdiv_0_wd = reg_wdata[15:0];
+
+  assign configopts_0_csnidle_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csnidle_0_wd = reg_wdata[19:16];
+
+  assign configopts_0_csntrail_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csntrail_0_wd = reg_wdata[23:20];
 
-  assign configopts_csnidle_0_we = addr_hit[5] & reg_we & !reg_error;
-  assign configopts_csnidle_0_wd = reg_wdata[19:16];
+  assign configopts_0_csnlead_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csnlead_0_wd = reg_wdata[27:24];
 
-  assign configopts_csntrail_0_we = addr_hit[5] & reg_we & !reg_error;
-  assign configopts_csntrail_0_wd = reg_wdata[23:20];
+  assign configopts_0_fullcyc_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_fullcyc_0_wd = reg_wdata[29];
 
-  assign configopts_csnlead_0_we = addr_hit[5] & reg_we & !reg_error;
-  assign configopts_csnlead_0_wd = reg_wdata[27:24];
+  assign configopts_0_cpha_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_cpha_0_wd = reg_wdata[30];
 
-  assign configopts_fullcyc_0_we = addr_hit[5] & reg_we & !reg_error;
-  assign configopts_fullcyc_0_wd = reg_wdata[29];
+  assign configopts_0_cpol_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_cpol_0_wd = reg_wdata[31];
 
-  assign configopts_cpha_0_we = addr_hit[5] & reg_we & !reg_error;
-  assign configopts_cpha_0_wd = reg_wdata[30];
+  assign configopts_1_clkdiv_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_clkdiv_1_wd = reg_wdata[15:0];
 
-  assign configopts_cpol_0_we = addr_hit[5] & reg_we & !reg_error;
-  assign configopts_cpol_0_wd = reg_wdata[31];
+  assign configopts_1_csnidle_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csnidle_1_wd = reg_wdata[19:16];
 
-  assign csid_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_1_csntrail_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csntrail_1_wd = reg_wdata[23:20];
+
+  assign configopts_1_csnlead_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csnlead_1_wd = reg_wdata[27:24];
+
+  assign configopts_1_fullcyc_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_fullcyc_1_wd = reg_wdata[29];
+
+  assign configopts_1_cpha_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_cpha_1_wd = reg_wdata[30];
+
+  assign configopts_1_cpol_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_cpol_1_wd = reg_wdata[31];
+
+  assign csid_we = addr_hit[8] & reg_we & !reg_error;
   assign csid_wd = reg_wdata[31:0];
 
-  assign command_len_we = addr_hit[7] & reg_we & !reg_error;
+  assign command_len_we = addr_hit[9] & reg_we & !reg_error;
   assign command_len_wd = reg_wdata[8:0];
 
-  assign command_csaat_we = addr_hit[7] & reg_we & !reg_error;
+  assign command_csaat_we = addr_hit[9] & reg_we & !reg_error;
   assign command_csaat_wd = reg_wdata[9];
 
-  assign command_speed_we = addr_hit[7] & reg_we & !reg_error;
+  assign command_speed_we = addr_hit[9] & reg_we & !reg_error;
   assign command_speed_wd = reg_wdata[11:10];
 
-  assign command_direction_we = addr_hit[7] & reg_we & !reg_error;
+  assign command_direction_we = addr_hit[9] & reg_we & !reg_error;
   assign command_direction_wd = reg_wdata[13:12];
 
-  assign error_enable_cmdbusy_we = addr_hit[8] & reg_we & !reg_error;
+  assign error_enable_cmdbusy_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_cmdbusy_wd = reg_wdata[0];
 
-  assign error_enable_overflow_we = addr_hit[8] & reg_we & !reg_error;
+  assign error_enable_overflow_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_overflow_wd = reg_wdata[1];
 
-  assign error_enable_underflow_we = addr_hit[8] & reg_we & !reg_error;
+  assign error_enable_underflow_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_underflow_wd = reg_wdata[2];
 
-  assign error_enable_cmdinval_we = addr_hit[8] & reg_we & !reg_error;
+  assign error_enable_cmdinval_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_cmdinval_wd = reg_wdata[3];
 
-  assign error_enable_csidinval_we = addr_hit[8] & reg_we & !reg_error;
+  assign error_enable_csidinval_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_csidinval_wd = reg_wdata[4];
 
-  assign error_status_cmdbusy_we = addr_hit[9] & reg_we & !reg_error;
+  assign error_status_cmdbusy_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_cmdbusy_wd = reg_wdata[0];
 
-  assign error_status_overflow_we = addr_hit[9] & reg_we & !reg_error;
+  assign error_status_overflow_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_overflow_wd = reg_wdata[1];
 
-  assign error_status_underflow_we = addr_hit[9] & reg_we & !reg_error;
+  assign error_status_underflow_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_underflow_wd = reg_wdata[2];
 
-  assign error_status_cmdinval_we = addr_hit[9] & reg_we & !reg_error;
+  assign error_status_cmdinval_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_cmdinval_wd = reg_wdata[3];
 
-  assign error_status_csidinval_we = addr_hit[9] & reg_we & !reg_error;
+  assign error_status_csidinval_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_csidinval_wd = reg_wdata[4];
 
-  assign event_enable_rxfull_we = addr_hit[10] & reg_we & !reg_error;
+  assign event_enable_rxfull_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_rxfull_wd = reg_wdata[0];
 
-  assign event_enable_txempty_we = addr_hit[10] & reg_we & !reg_error;
+  assign event_enable_txempty_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_txempty_wd = reg_wdata[1];
 
-  assign event_enable_rxwm_we = addr_hit[10] & reg_we & !reg_error;
+  assign event_enable_rxwm_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_rxwm_wd = reg_wdata[2];
 
-  assign event_enable_txwm_we = addr_hit[10] & reg_we & !reg_error;
+  assign event_enable_txwm_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_txwm_wd = reg_wdata[3];
 
-  assign event_enable_ready_we = addr_hit[10] & reg_we & !reg_error;
+  assign event_enable_ready_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_ready_wd = reg_wdata[4];
 
-  assign event_enable_idle_we = addr_hit[10] & reg_we & !reg_error;
+  assign event_enable_idle_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_idle_wd = reg_wdata[5];
 
   // Read data return
@@ -1796,14 +1972,17 @@ module spi_host_reg_top (
       end
 
       addr_hit[3]: begin
+        reg_rdata_next[0] = '0;
+      end
+
+      addr_hit[4]: begin
         reg_rdata_next[7:0] = control_rx_watermark_qs;
         reg_rdata_next[15:8] = control_tx_watermark_qs;
-        reg_rdata_next[29] = control_passthru_qs;
         reg_rdata_next[30] = control_sw_rst_qs;
         reg_rdata_next[31] = control_spien_qs;
       end
 
-      addr_hit[4]: begin
+      addr_hit[5]: begin
         reg_rdata_next[7:0] = status_txqd_qs;
         reg_rdata_next[15:8] = status_rxqd_qs;
         reg_rdata_next[20] = status_rxwm_qs;
@@ -1819,28 +1998,38 @@ module spi_host_reg_top (
         reg_rdata_next[31] = status_ready_qs;
       end
 
-      addr_hit[5]: begin
-        reg_rdata_next[15:0] = configopts_clkdiv_0_qs;
-        reg_rdata_next[19:16] = configopts_csnidle_0_qs;
-        reg_rdata_next[23:20] = configopts_csntrail_0_qs;
-        reg_rdata_next[27:24] = configopts_csnlead_0_qs;
-        reg_rdata_next[29] = configopts_fullcyc_0_qs;
-        reg_rdata_next[30] = configopts_cpha_0_qs;
-        reg_rdata_next[31] = configopts_cpol_0_qs;
+      addr_hit[6]: begin
+        reg_rdata_next[15:0] = configopts_0_clkdiv_0_qs;
+        reg_rdata_next[19:16] = configopts_0_csnidle_0_qs;
+        reg_rdata_next[23:20] = configopts_0_csntrail_0_qs;
+        reg_rdata_next[27:24] = configopts_0_csnlead_0_qs;
+        reg_rdata_next[29] = configopts_0_fullcyc_0_qs;
+        reg_rdata_next[30] = configopts_0_cpha_0_qs;
+        reg_rdata_next[31] = configopts_0_cpol_0_qs;
       end
 
-      addr_hit[6]: begin
+      addr_hit[7]: begin
+        reg_rdata_next[15:0] = configopts_1_clkdiv_1_qs;
+        reg_rdata_next[19:16] = configopts_1_csnidle_1_qs;
+        reg_rdata_next[23:20] = configopts_1_csntrail_1_qs;
+        reg_rdata_next[27:24] = configopts_1_csnlead_1_qs;
+        reg_rdata_next[29] = configopts_1_fullcyc_1_qs;
+        reg_rdata_next[30] = configopts_1_cpha_1_qs;
+        reg_rdata_next[31] = configopts_1_cpol_1_qs;
+      end
+
+      addr_hit[8]: begin
         reg_rdata_next[31:0] = csid_qs;
       end
 
-      addr_hit[7]: begin
+      addr_hit[9]: begin
         reg_rdata_next[8:0] = command_len_qs;
         reg_rdata_next[9] = command_csaat_qs;
         reg_rdata_next[11:10] = command_speed_qs;
         reg_rdata_next[13:12] = command_direction_qs;
       end
 
-      addr_hit[8]: begin
+      addr_hit[10]: begin
         reg_rdata_next[0] = error_enable_cmdbusy_qs;
         reg_rdata_next[1] = error_enable_overflow_qs;
         reg_rdata_next[2] = error_enable_underflow_qs;
@@ -1848,7 +2037,7 @@ module spi_host_reg_top (
         reg_rdata_next[4] = error_enable_csidinval_qs;
       end
 
-      addr_hit[9]: begin
+      addr_hit[11]: begin
         reg_rdata_next[0] = error_status_cmdbusy_qs;
         reg_rdata_next[1] = error_status_overflow_qs;
         reg_rdata_next[2] = error_status_underflow_qs;
@@ -1856,7 +2045,7 @@ module spi_host_reg_top (
         reg_rdata_next[4] = error_status_csidinval_qs;
       end
 
-      addr_hit[10]: begin
+      addr_hit[12]: begin
         reg_rdata_next[0] = event_enable_rxfull_qs;
         reg_rdata_next[1] = event_enable_txempty_qs;
         reg_rdata_next[2] = event_enable_rxwm_qs;
@@ -1881,15 +2070,6 @@ module spi_host_reg_top (
   assign unused_be = ^reg_be;
 
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we)
-  `ASSERT_PULSE(rePulse, reg_re)
-
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)
-
   `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
-  // this is formulated as an assumption such that the FPV testbenches do disprove this
-  // property by mistake
-  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
-
 endmodule
diff --git a/hw/ip/spi_host/rtl/spi_host_shift_register.sv b/hw/ip/spi_host/rtl/spi_host_shift_register.sv
index 992bd34f7..468bbda91 100644
--- a/hw/ip/spi_host/rtl/spi_host_shift_register.sv
+++ b/hw/ip/spi_host/rtl/spi_host_shift_register.sv
@@ -5,6 +5,8 @@
 // Shift Register for Serial Peripheral Interface (SPI) Host IP.
 //
 
+`include "common_cells/assertions.svh"
+
 module spi_host_shift_register (
   input              clk_i,
   input              rst_ni,
@@ -50,10 +52,11 @@ module spi_host_shift_register (
   logic              rx_buf_valid_q;
   logic              rx_buf_valid_d;
 
-  `ASSERT(SpeedValid, speed_i != RsvdSpd, clk_i, rst_ni)
+  `ASSERT(SpeedValid, $isunknown(rst_ni) || (speed_i != RsvdSpd), clk_i, rst_ni)
 
   assign next_bits  = full_cyc_i ? sd_i : sd_i_q;
-  assign sr_shifted = (speed_i == Standard) ? {sr_q[6:0], next_bits[0]} :
+  // NB: In Standard mode, input data is sent on SI (Pin 1), *not* on SO (Pin 0)
+  assign sr_shifted = (speed_i == Standard) ? {sr_q[6:0], next_bits[1]} :
                       (speed_i == Dual)     ? {sr_q[5:0], next_bits[1:0]} :
                       (speed_i == Quad)     ? {sr_q[3:0], next_bits[3:0]} :
                       8'h00;
@@ -61,7 +64,7 @@ module spi_host_shift_register (
   assign sd_o       = (speed_i == Standard) ? {3'b000, sr_q[7]}   :
                       (speed_i == Dual)     ? {2'b00,  sr_q[7:6]} :
                       (speed_i == Quad)     ? {sr_q[7:4]} :
-                      4'h00;
+                      4'h0;
 
   // Buffer the rx_data outputs to simplify three-way flow control
   // between fsm, shift reg and byte_merge.
diff --git a/hw/ip/spi_host/rtl/spi_host_window.sv b/hw/ip/spi_host/rtl/spi_host_window.sv
index 768a93d6f..7ec505e93 100644
--- a/hw/ip/spi_host/rtl/spi_host_window.sv
+++ b/hw/ip/spi_host/rtl/spi_host_window.sv
@@ -5,16 +5,22 @@
 // Module to manage TX FIFO window for Serial Peripheral Interface (SPI) host IP.
 //
 
-module spi_host_window (
+`include "common_cells/assertions.svh"
+
+module spi_host_window
+#(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
+)(
   input  clk_i,
   input  rst_ni,
-  input  tlul_pkg::tl_h2d_t win_i,
-  output tlul_pkg::tl_d2h_t win_o,
+  input  reg_req_t          win_i,
+  output reg_rsp_t          win_o,
   output logic [31:0]       tx_data_o,
   output logic [3:0]        tx_be_o,
   output logic              tx_valid_o,
   input        [31:0]       rx_data_i,
-  output                    rx_ready_o
+  output logic              rx_ready_o
 );
 
   localparam int AW=spi_host_reg_pkg::BlockAw;
@@ -27,21 +33,20 @@ module spi_host_window (
   assign win_error = (tx_valid_o || rx_ready_o) &&
                      (addr != spi_host_reg_pkg::SPI_HOST_DATA_OFFSET);
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW)
-  ) u_adapter (
-    .clk_i,
-    .rst_ni,
-    .tl_i      (win_i),
-    .tl_o      (win_o),
-    .we_o      (tx_valid_o),
-    .re_o      (rx_ready_o),
-    .addr_o    (addr),
-    .wdata_o   (tx_data_o),
-    .be_o      (tx_be_o),
-    .rdata_i   (rx_data_i),
-    .error_i   (win_error)
-  );
+  // Check that our regbus data is 32 bit wide
+`ASSERT_INIT(RegbusIs32Bit, $bits(win_i.wdata) == 32)
+
+  // We are already a regbus, so no stateful adapter should be needed here
+  // TODO @(paulsc, zarubaf): check this assumption!
+  // Request
+  assign tx_valid_o   = win_i.valid & win_i.write;    // write-enable
+  assign rx_ready_o   = win_i.valid & ~win_i.write;   // read-enable
+  assign addr         = win_i.addr;
+  assign tx_data_o    = win_i.wdata;
+  assign tx_be_o      = win_i.wstrb;
+  // Response: always ready, else over/underflow error reported in regfile
+  assign win_o.rdata  = rx_data_i;
+  assign win_o.error  = win_error;
+  assign win_o.ready  = 1'b1;
 
 endmodule : spi_host_window
diff --git a/hw/ip/spi_host/spi_host.core b/hw/ip/spi_host/spi_host.core
index dd97bff66..dc42065fc 100644
--- a/hw/ip/spi_host/spi_host.core
+++ b/hw/ip/spi_host/spi_host.core
@@ -8,11 +8,8 @@ description: "SPI_HOST DV"
 filesets:
   files_rtl:
     depend:
-      - lowrisc:constants:top_pkg
       - lowrisc:prim:all
-      - lowrisc:ip:lc_ctrl
-      - lowrisc:ip:tlul
-      - lowrisc:ip:spi_device_pkg
+      - pulp-platform.org::register_interface
     files:
       - rtl/spi_host_reg_pkg.sv
       - rtl/spi_host_cmd_pkg.sv
