// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package power_manager_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic q;} power_manager_reg2hw_power_gate_core_reg_t;

  typedef struct packed {logic q;} power_manager_reg2hw_wakeup_state_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_restore_address_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x1_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x2_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x3_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x4_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x5_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x6_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x7_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x8_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x9_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x10_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x11_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x12_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x13_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x14_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x15_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x16_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x17_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x18_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x19_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x20_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x21_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x22_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x23_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x24_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x25_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x26_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x27_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x28_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x29_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x30_reg_t;

  typedef struct packed {logic [31:0] q;} power_manager_reg2hw_core_reg_x31_reg_t;

  typedef struct packed {logic q;} power_manager_reg2hw_en_wait_for_intr_reg_t;

  typedef struct packed {logic q;} power_manager_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic d;
    logic de;
  } power_manager_hw2reg_intr_state_reg_t;

  // Register -> HW type
  typedef struct packed {
    power_manager_reg2hw_power_gate_core_reg_t power_gate_core;  // [1027:1027]
    power_manager_reg2hw_wakeup_state_reg_t wakeup_state;  // [1026:1026]
    power_manager_reg2hw_restore_address_reg_t restore_address;  // [1025:994]
    power_manager_reg2hw_core_reg_x1_reg_t core_reg_x1;  // [993:962]
    power_manager_reg2hw_core_reg_x2_reg_t core_reg_x2;  // [961:930]
    power_manager_reg2hw_core_reg_x3_reg_t core_reg_x3;  // [929:898]
    power_manager_reg2hw_core_reg_x4_reg_t core_reg_x4;  // [897:866]
    power_manager_reg2hw_core_reg_x5_reg_t core_reg_x5;  // [865:834]
    power_manager_reg2hw_core_reg_x6_reg_t core_reg_x6;  // [833:802]
    power_manager_reg2hw_core_reg_x7_reg_t core_reg_x7;  // [801:770]
    power_manager_reg2hw_core_reg_x8_reg_t core_reg_x8;  // [769:738]
    power_manager_reg2hw_core_reg_x9_reg_t core_reg_x9;  // [737:706]
    power_manager_reg2hw_core_reg_x10_reg_t core_reg_x10;  // [705:674]
    power_manager_reg2hw_core_reg_x11_reg_t core_reg_x11;  // [673:642]
    power_manager_reg2hw_core_reg_x12_reg_t core_reg_x12;  // [641:610]
    power_manager_reg2hw_core_reg_x13_reg_t core_reg_x13;  // [609:578]
    power_manager_reg2hw_core_reg_x14_reg_t core_reg_x14;  // [577:546]
    power_manager_reg2hw_core_reg_x15_reg_t core_reg_x15;  // [545:514]
    power_manager_reg2hw_core_reg_x16_reg_t core_reg_x16;  // [513:482]
    power_manager_reg2hw_core_reg_x17_reg_t core_reg_x17;  // [481:450]
    power_manager_reg2hw_core_reg_x18_reg_t core_reg_x18;  // [449:418]
    power_manager_reg2hw_core_reg_x19_reg_t core_reg_x19;  // [417:386]
    power_manager_reg2hw_core_reg_x20_reg_t core_reg_x20;  // [385:354]
    power_manager_reg2hw_core_reg_x21_reg_t core_reg_x21;  // [353:322]
    power_manager_reg2hw_core_reg_x22_reg_t core_reg_x22;  // [321:290]
    power_manager_reg2hw_core_reg_x23_reg_t core_reg_x23;  // [289:258]
    power_manager_reg2hw_core_reg_x24_reg_t core_reg_x24;  // [257:226]
    power_manager_reg2hw_core_reg_x25_reg_t core_reg_x25;  // [225:194]
    power_manager_reg2hw_core_reg_x26_reg_t core_reg_x26;  // [193:162]
    power_manager_reg2hw_core_reg_x27_reg_t core_reg_x27;  // [161:130]
    power_manager_reg2hw_core_reg_x28_reg_t core_reg_x28;  // [129:98]
    power_manager_reg2hw_core_reg_x29_reg_t core_reg_x29;  // [97:66]
    power_manager_reg2hw_core_reg_x30_reg_t core_reg_x30;  // [65:34]
    power_manager_reg2hw_core_reg_x31_reg_t core_reg_x31;  // [33:2]
    power_manager_reg2hw_en_wait_for_intr_reg_t en_wait_for_intr;  // [1:1]
    power_manager_reg2hw_intr_state_reg_t intr_state;  // [0:0]
  } power_manager_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    power_manager_hw2reg_intr_state_reg_t intr_state;  // [1:0]
  } power_manager_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] POWER_MANAGER_POWER_GATE_CORE_OFFSET = 8'h0;
  parameter logic [BlockAw-1:0] POWER_MANAGER_WAKEUP_STATE_OFFSET = 8'h4;
  parameter logic [BlockAw-1:0] POWER_MANAGER_RESTORE_ADDRESS_OFFSET = 8'h8;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X1_OFFSET = 8'hc;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X2_OFFSET = 8'h10;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X3_OFFSET = 8'h14;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X4_OFFSET = 8'h18;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X5_OFFSET = 8'h1c;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X6_OFFSET = 8'h20;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X7_OFFSET = 8'h24;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X8_OFFSET = 8'h28;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X9_OFFSET = 8'h2c;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X10_OFFSET = 8'h30;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X11_OFFSET = 8'h34;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X12_OFFSET = 8'h38;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X13_OFFSET = 8'h3c;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X14_OFFSET = 8'h40;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X15_OFFSET = 8'h44;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X16_OFFSET = 8'h48;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X17_OFFSET = 8'h4c;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X18_OFFSET = 8'h50;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X19_OFFSET = 8'h54;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X20_OFFSET = 8'h58;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X21_OFFSET = 8'h5c;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X22_OFFSET = 8'h60;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X23_OFFSET = 8'h64;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X24_OFFSET = 8'h68;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X25_OFFSET = 8'h6c;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X26_OFFSET = 8'h70;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X27_OFFSET = 8'h74;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X28_OFFSET = 8'h78;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X29_OFFSET = 8'h7c;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X30_OFFSET = 8'h80;
  parameter logic [BlockAw-1:0] POWER_MANAGER_CORE_REG_X31_OFFSET = 8'h84;
  parameter logic [BlockAw-1:0] POWER_MANAGER_EN_WAIT_FOR_INTR_OFFSET = 8'h88;
  parameter logic [BlockAw-1:0] POWER_MANAGER_INTR_STATE_OFFSET = 8'h8c;

  // Register index
  typedef enum int {
    POWER_MANAGER_POWER_GATE_CORE,
    POWER_MANAGER_WAKEUP_STATE,
    POWER_MANAGER_RESTORE_ADDRESS,
    POWER_MANAGER_CORE_REG_X1,
    POWER_MANAGER_CORE_REG_X2,
    POWER_MANAGER_CORE_REG_X3,
    POWER_MANAGER_CORE_REG_X4,
    POWER_MANAGER_CORE_REG_X5,
    POWER_MANAGER_CORE_REG_X6,
    POWER_MANAGER_CORE_REG_X7,
    POWER_MANAGER_CORE_REG_X8,
    POWER_MANAGER_CORE_REG_X9,
    POWER_MANAGER_CORE_REG_X10,
    POWER_MANAGER_CORE_REG_X11,
    POWER_MANAGER_CORE_REG_X12,
    POWER_MANAGER_CORE_REG_X13,
    POWER_MANAGER_CORE_REG_X14,
    POWER_MANAGER_CORE_REG_X15,
    POWER_MANAGER_CORE_REG_X16,
    POWER_MANAGER_CORE_REG_X17,
    POWER_MANAGER_CORE_REG_X18,
    POWER_MANAGER_CORE_REG_X19,
    POWER_MANAGER_CORE_REG_X20,
    POWER_MANAGER_CORE_REG_X21,
    POWER_MANAGER_CORE_REG_X22,
    POWER_MANAGER_CORE_REG_X23,
    POWER_MANAGER_CORE_REG_X24,
    POWER_MANAGER_CORE_REG_X25,
    POWER_MANAGER_CORE_REG_X26,
    POWER_MANAGER_CORE_REG_X27,
    POWER_MANAGER_CORE_REG_X28,
    POWER_MANAGER_CORE_REG_X29,
    POWER_MANAGER_CORE_REG_X30,
    POWER_MANAGER_CORE_REG_X31,
    POWER_MANAGER_EN_WAIT_FOR_INTR,
    POWER_MANAGER_INTR_STATE
  } power_manager_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] POWER_MANAGER_PERMIT[36] = '{
      4'b0001,  // index[ 0] POWER_MANAGER_POWER_GATE_CORE
      4'b0001,  // index[ 1] POWER_MANAGER_WAKEUP_STATE
      4'b1111,  // index[ 2] POWER_MANAGER_RESTORE_ADDRESS
      4'b1111,  // index[ 3] POWER_MANAGER_CORE_REG_X1
      4'b1111,  // index[ 4] POWER_MANAGER_CORE_REG_X2
      4'b1111,  // index[ 5] POWER_MANAGER_CORE_REG_X3
      4'b1111,  // index[ 6] POWER_MANAGER_CORE_REG_X4
      4'b1111,  // index[ 7] POWER_MANAGER_CORE_REG_X5
      4'b1111,  // index[ 8] POWER_MANAGER_CORE_REG_X6
      4'b1111,  // index[ 9] POWER_MANAGER_CORE_REG_X7
      4'b1111,  // index[10] POWER_MANAGER_CORE_REG_X8
      4'b1111,  // index[11] POWER_MANAGER_CORE_REG_X9
      4'b1111,  // index[12] POWER_MANAGER_CORE_REG_X10
      4'b1111,  // index[13] POWER_MANAGER_CORE_REG_X11
      4'b1111,  // index[14] POWER_MANAGER_CORE_REG_X12
      4'b1111,  // index[15] POWER_MANAGER_CORE_REG_X13
      4'b1111,  // index[16] POWER_MANAGER_CORE_REG_X14
      4'b1111,  // index[17] POWER_MANAGER_CORE_REG_X15
      4'b1111,  // index[18] POWER_MANAGER_CORE_REG_X16
      4'b1111,  // index[19] POWER_MANAGER_CORE_REG_X17
      4'b1111,  // index[20] POWER_MANAGER_CORE_REG_X18
      4'b1111,  // index[21] POWER_MANAGER_CORE_REG_X19
      4'b1111,  // index[22] POWER_MANAGER_CORE_REG_X20
      4'b1111,  // index[23] POWER_MANAGER_CORE_REG_X21
      4'b1111,  // index[24] POWER_MANAGER_CORE_REG_X22
      4'b1111,  // index[25] POWER_MANAGER_CORE_REG_X23
      4'b1111,  // index[26] POWER_MANAGER_CORE_REG_X24
      4'b1111,  // index[27] POWER_MANAGER_CORE_REG_X25
      4'b1111,  // index[28] POWER_MANAGER_CORE_REG_X26
      4'b1111,  // index[29] POWER_MANAGER_CORE_REG_X27
      4'b1111,  // index[30] POWER_MANAGER_CORE_REG_X28
      4'b1111,  // index[31] POWER_MANAGER_CORE_REG_X29
      4'b1111,  // index[32] POWER_MANAGER_CORE_REG_X30
      4'b1111,  // index[33] POWER_MANAGER_CORE_REG_X31
      4'b0001,  // index[34] POWER_MANAGER_EN_WAIT_FOR_INTR
      4'b0001  // index[35] POWER_MANAGER_INTR_STATE
  };

endpackage

