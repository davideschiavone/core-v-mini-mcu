// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module power_manager_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output power_manager_reg_pkg::power_manager_reg2hw_t reg2hw, // Write
  input  power_manager_reg_pkg::power_manager_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import power_manager_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic power_gate_core_qs;
  logic power_gate_core_wd;
  logic power_gate_core_we;
  logic wakeup_state_qs;
  logic wakeup_state_wd;
  logic wakeup_state_we;
  logic [31:0] restore_address_qs;
  logic [31:0] restore_address_wd;
  logic restore_address_we;
  logic [31:0] core_reg_x1_qs;
  logic [31:0] core_reg_x1_wd;
  logic core_reg_x1_we;
  logic [31:0] core_reg_x2_qs;
  logic [31:0] core_reg_x2_wd;
  logic core_reg_x2_we;
  logic [31:0] core_reg_x3_qs;
  logic [31:0] core_reg_x3_wd;
  logic core_reg_x3_we;
  logic [31:0] core_reg_x4_qs;
  logic [31:0] core_reg_x4_wd;
  logic core_reg_x4_we;
  logic [31:0] core_reg_x5_qs;
  logic [31:0] core_reg_x5_wd;
  logic core_reg_x5_we;
  logic [31:0] core_reg_x6_qs;
  logic [31:0] core_reg_x6_wd;
  logic core_reg_x6_we;
  logic [31:0] core_reg_x7_qs;
  logic [31:0] core_reg_x7_wd;
  logic core_reg_x7_we;
  logic [31:0] core_reg_x8_qs;
  logic [31:0] core_reg_x8_wd;
  logic core_reg_x8_we;
  logic [31:0] core_reg_x9_qs;
  logic [31:0] core_reg_x9_wd;
  logic core_reg_x9_we;
  logic [31:0] core_reg_x10_qs;
  logic [31:0] core_reg_x10_wd;
  logic core_reg_x10_we;
  logic [31:0] core_reg_x11_qs;
  logic [31:0] core_reg_x11_wd;
  logic core_reg_x11_we;
  logic [31:0] core_reg_x12_qs;
  logic [31:0] core_reg_x12_wd;
  logic core_reg_x12_we;
  logic [31:0] core_reg_x13_qs;
  logic [31:0] core_reg_x13_wd;
  logic core_reg_x13_we;
  logic [31:0] core_reg_x14_qs;
  logic [31:0] core_reg_x14_wd;
  logic core_reg_x14_we;
  logic [31:0] core_reg_x15_qs;
  logic [31:0] core_reg_x15_wd;
  logic core_reg_x15_we;
  logic [31:0] core_reg_x16_qs;
  logic [31:0] core_reg_x16_wd;
  logic core_reg_x16_we;
  logic [31:0] core_reg_x17_qs;
  logic [31:0] core_reg_x17_wd;
  logic core_reg_x17_we;
  logic [31:0] core_reg_x18_qs;
  logic [31:0] core_reg_x18_wd;
  logic core_reg_x18_we;
  logic [31:0] core_reg_x19_qs;
  logic [31:0] core_reg_x19_wd;
  logic core_reg_x19_we;
  logic [31:0] core_reg_x20_qs;
  logic [31:0] core_reg_x20_wd;
  logic core_reg_x20_we;
  logic [31:0] core_reg_x21_qs;
  logic [31:0] core_reg_x21_wd;
  logic core_reg_x21_we;
  logic [31:0] core_reg_x22_qs;
  logic [31:0] core_reg_x22_wd;
  logic core_reg_x22_we;
  logic [31:0] core_reg_x23_qs;
  logic [31:0] core_reg_x23_wd;
  logic core_reg_x23_we;
  logic [31:0] core_reg_x24_qs;
  logic [31:0] core_reg_x24_wd;
  logic core_reg_x24_we;
  logic [31:0] core_reg_x25_qs;
  logic [31:0] core_reg_x25_wd;
  logic core_reg_x25_we;
  logic [31:0] core_reg_x26_qs;
  logic [31:0] core_reg_x26_wd;
  logic core_reg_x26_we;
  logic [31:0] core_reg_x27_qs;
  logic [31:0] core_reg_x27_wd;
  logic core_reg_x27_we;
  logic [31:0] core_reg_x28_qs;
  logic [31:0] core_reg_x28_wd;
  logic core_reg_x28_we;
  logic [31:0] core_reg_x29_qs;
  logic [31:0] core_reg_x29_wd;
  logic core_reg_x29_we;
  logic [31:0] core_reg_x30_qs;
  logic [31:0] core_reg_x30_wd;
  logic core_reg_x30_we;
  logic [31:0] core_reg_x31_qs;
  logic [31:0] core_reg_x31_wd;
  logic core_reg_x31_we;
  logic [31:0] core_csr_c0_qs;
  logic [31:0] core_csr_c0_wd;
  logic core_csr_c0_we;
  logic [31:0] core_csr_c1_qs;
  logic [31:0] core_csr_c1_wd;
  logic core_csr_c1_we;
  logic [31:0] core_csr_c2_qs;
  logic [31:0] core_csr_c2_wd;
  logic core_csr_c2_we;
  logic [31:0] core_csr_c3_qs;
  logic [31:0] core_csr_c3_wd;
  logic core_csr_c3_we;
  logic [31:0] core_csr_c4_qs;
  logic [31:0] core_csr_c4_wd;
  logic core_csr_c4_we;
  logic [31:0] core_csr_c5_qs;
  logic [31:0] core_csr_c5_wd;
  logic core_csr_c5_we;
  logic [31:0] core_csr_c6_qs;
  logic [31:0] core_csr_c6_wd;
  logic core_csr_c6_we;
  logic [31:0] core_csr_c7_qs;
  logic [31:0] core_csr_c7_wd;
  logic core_csr_c7_we;
  logic en_wait_for_intr_qs;
  logic en_wait_for_intr_wd;
  logic en_wait_for_intr_we;
  logic intr_state_qs;
  logic intr_state_wd;
  logic intr_state_we;
  logic [31:0] cpu_reset_assert_counter_qs;
  logic [31:0] cpu_reset_assert_counter_wd;
  logic cpu_reset_assert_counter_we;
  logic [31:0] cpu_reset_deassert_counter_qs;
  logic [31:0] cpu_reset_deassert_counter_wd;
  logic cpu_reset_deassert_counter_we;
  logic [31:0] cpu_switch_off_counter_qs;
  logic [31:0] cpu_switch_off_counter_wd;
  logic cpu_switch_off_counter_we;
  logic [31:0] cpu_switch_on_counter_qs;
  logic [31:0] cpu_switch_on_counter_wd;
  logic cpu_switch_on_counter_we;

  // Register instances
  // R[power_gate_core]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_power_gate_core (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (power_gate_core_we),
    .wd     (power_gate_core_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.power_gate_core.q ),

    // to register interface (read)
    .qs     (power_gate_core_qs)
  );


  // R[wakeup_state]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_wakeup_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (wakeup_state_we),
    .wd     (wakeup_state_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wakeup_state.q ),

    // to register interface (read)
    .qs     (wakeup_state_qs)
  );


  // R[restore_address]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_restore_address (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (restore_address_we),
    .wd     (restore_address_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.restore_address.q ),

    // to register interface (read)
    .qs     (restore_address_qs)
  );


  // R[core_reg_x1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x1_we),
    .wd     (core_reg_x1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x1.q ),

    // to register interface (read)
    .qs     (core_reg_x1_qs)
  );


  // R[core_reg_x2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x2_we),
    .wd     (core_reg_x2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x2.q ),

    // to register interface (read)
    .qs     (core_reg_x2_qs)
  );


  // R[core_reg_x3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x3_we),
    .wd     (core_reg_x3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x3.q ),

    // to register interface (read)
    .qs     (core_reg_x3_qs)
  );


  // R[core_reg_x4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x4_we),
    .wd     (core_reg_x4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x4.q ),

    // to register interface (read)
    .qs     (core_reg_x4_qs)
  );


  // R[core_reg_x5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x5_we),
    .wd     (core_reg_x5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x5.q ),

    // to register interface (read)
    .qs     (core_reg_x5_qs)
  );


  // R[core_reg_x6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x6_we),
    .wd     (core_reg_x6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x6.q ),

    // to register interface (read)
    .qs     (core_reg_x6_qs)
  );


  // R[core_reg_x7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x7_we),
    .wd     (core_reg_x7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x7.q ),

    // to register interface (read)
    .qs     (core_reg_x7_qs)
  );


  // R[core_reg_x8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x8_we),
    .wd     (core_reg_x8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x8.q ),

    // to register interface (read)
    .qs     (core_reg_x8_qs)
  );


  // R[core_reg_x9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x9_we),
    .wd     (core_reg_x9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x9.q ),

    // to register interface (read)
    .qs     (core_reg_x9_qs)
  );


  // R[core_reg_x10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x10_we),
    .wd     (core_reg_x10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x10.q ),

    // to register interface (read)
    .qs     (core_reg_x10_qs)
  );


  // R[core_reg_x11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x11_we),
    .wd     (core_reg_x11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x11.q ),

    // to register interface (read)
    .qs     (core_reg_x11_qs)
  );


  // R[core_reg_x12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x12_we),
    .wd     (core_reg_x12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x12.q ),

    // to register interface (read)
    .qs     (core_reg_x12_qs)
  );


  // R[core_reg_x13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x13_we),
    .wd     (core_reg_x13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x13.q ),

    // to register interface (read)
    .qs     (core_reg_x13_qs)
  );


  // R[core_reg_x14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x14_we),
    .wd     (core_reg_x14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x14.q ),

    // to register interface (read)
    .qs     (core_reg_x14_qs)
  );


  // R[core_reg_x15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x15_we),
    .wd     (core_reg_x15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x15.q ),

    // to register interface (read)
    .qs     (core_reg_x15_qs)
  );


  // R[core_reg_x16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x16_we),
    .wd     (core_reg_x16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x16.q ),

    // to register interface (read)
    .qs     (core_reg_x16_qs)
  );


  // R[core_reg_x17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x17_we),
    .wd     (core_reg_x17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x17.q ),

    // to register interface (read)
    .qs     (core_reg_x17_qs)
  );


  // R[core_reg_x18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x18_we),
    .wd     (core_reg_x18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x18.q ),

    // to register interface (read)
    .qs     (core_reg_x18_qs)
  );


  // R[core_reg_x19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x19_we),
    .wd     (core_reg_x19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x19.q ),

    // to register interface (read)
    .qs     (core_reg_x19_qs)
  );


  // R[core_reg_x20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x20_we),
    .wd     (core_reg_x20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x20.q ),

    // to register interface (read)
    .qs     (core_reg_x20_qs)
  );


  // R[core_reg_x21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x21_we),
    .wd     (core_reg_x21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x21.q ),

    // to register interface (read)
    .qs     (core_reg_x21_qs)
  );


  // R[core_reg_x22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x22_we),
    .wd     (core_reg_x22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x22.q ),

    // to register interface (read)
    .qs     (core_reg_x22_qs)
  );


  // R[core_reg_x23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x23_we),
    .wd     (core_reg_x23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x23.q ),

    // to register interface (read)
    .qs     (core_reg_x23_qs)
  );


  // R[core_reg_x24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x24_we),
    .wd     (core_reg_x24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x24.q ),

    // to register interface (read)
    .qs     (core_reg_x24_qs)
  );


  // R[core_reg_x25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x25_we),
    .wd     (core_reg_x25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x25.q ),

    // to register interface (read)
    .qs     (core_reg_x25_qs)
  );


  // R[core_reg_x26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x26_we),
    .wd     (core_reg_x26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x26.q ),

    // to register interface (read)
    .qs     (core_reg_x26_qs)
  );


  // R[core_reg_x27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x27_we),
    .wd     (core_reg_x27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x27.q ),

    // to register interface (read)
    .qs     (core_reg_x27_qs)
  );


  // R[core_reg_x28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x28_we),
    .wd     (core_reg_x28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x28.q ),

    // to register interface (read)
    .qs     (core_reg_x28_qs)
  );


  // R[core_reg_x29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x29_we),
    .wd     (core_reg_x29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x29.q ),

    // to register interface (read)
    .qs     (core_reg_x29_qs)
  );


  // R[core_reg_x30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x30_we),
    .wd     (core_reg_x30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x30.q ),

    // to register interface (read)
    .qs     (core_reg_x30_qs)
  );


  // R[core_reg_x31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_reg_x31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_reg_x31_we),
    .wd     (core_reg_x31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_reg_x31.q ),

    // to register interface (read)
    .qs     (core_reg_x31_qs)
  );


  // R[core_csr_c0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c0_we),
    .wd     (core_csr_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c0.q ),

    // to register interface (read)
    .qs     (core_csr_c0_qs)
  );


  // R[core_csr_c1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c1_we),
    .wd     (core_csr_c1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c1.q ),

    // to register interface (read)
    .qs     (core_csr_c1_qs)
  );


  // R[core_csr_c2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c2_we),
    .wd     (core_csr_c2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c2.q ),

    // to register interface (read)
    .qs     (core_csr_c2_qs)
  );


  // R[core_csr_c3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c3_we),
    .wd     (core_csr_c3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c3.q ),

    // to register interface (read)
    .qs     (core_csr_c3_qs)
  );


  // R[core_csr_c4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c4_we),
    .wd     (core_csr_c4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c4.q ),

    // to register interface (read)
    .qs     (core_csr_c4_qs)
  );


  // R[core_csr_c5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c5_we),
    .wd     (core_csr_c5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c5.q ),

    // to register interface (read)
    .qs     (core_csr_c5_qs)
  );


  // R[core_csr_c6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c6_we),
    .wd     (core_csr_c6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c6.q ),

    // to register interface (read)
    .qs     (core_csr_c6_qs)
  );


  // R[core_csr_c7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_core_csr_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (core_csr_c7_we),
    .wd     (core_csr_c7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.core_csr_c7.q ),

    // to register interface (read)
    .qs     (core_csr_c7_qs)
  );


  // R[en_wait_for_intr]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_en_wait_for_intr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (en_wait_for_intr_we),
    .wd     (en_wait_for_intr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.en_wait_for_intr.q ),

    // to register interface (read)
    .qs     (en_wait_for_intr_qs)
  );


  // R[intr_state]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.de),
    .d      (hw2reg.intr_state.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.q ),

    // to register interface (read)
    .qs     (intr_state_qs)
  );


  // R[cpu_reset_assert_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_reset_assert_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_reset_assert_counter_we),
    .wd     (cpu_reset_assert_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_reset_assert_counter.q ),

    // to register interface (read)
    .qs     (cpu_reset_assert_counter_qs)
  );


  // R[cpu_reset_deassert_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_reset_deassert_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_reset_deassert_counter_we),
    .wd     (cpu_reset_deassert_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_reset_deassert_counter.q ),

    // to register interface (read)
    .qs     (cpu_reset_deassert_counter_qs)
  );


  // R[cpu_switch_off_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_switch_off_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_switch_off_counter_we),
    .wd     (cpu_switch_off_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_switch_off_counter.q ),

    // to register interface (read)
    .qs     (cpu_switch_off_counter_qs)
  );


  // R[cpu_switch_on_counter]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cpu_switch_on_counter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_switch_on_counter_we),
    .wd     (cpu_switch_on_counter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_switch_on_counter.q ),

    // to register interface (read)
    .qs     (cpu_switch_on_counter_qs)
  );




  logic [47:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == POWER_MANAGER_POWER_GATE_CORE_OFFSET);
    addr_hit[ 1] = (reg_addr == POWER_MANAGER_WAKEUP_STATE_OFFSET);
    addr_hit[ 2] = (reg_addr == POWER_MANAGER_RESTORE_ADDRESS_OFFSET);
    addr_hit[ 3] = (reg_addr == POWER_MANAGER_CORE_REG_X1_OFFSET);
    addr_hit[ 4] = (reg_addr == POWER_MANAGER_CORE_REG_X2_OFFSET);
    addr_hit[ 5] = (reg_addr == POWER_MANAGER_CORE_REG_X3_OFFSET);
    addr_hit[ 6] = (reg_addr == POWER_MANAGER_CORE_REG_X4_OFFSET);
    addr_hit[ 7] = (reg_addr == POWER_MANAGER_CORE_REG_X5_OFFSET);
    addr_hit[ 8] = (reg_addr == POWER_MANAGER_CORE_REG_X6_OFFSET);
    addr_hit[ 9] = (reg_addr == POWER_MANAGER_CORE_REG_X7_OFFSET);
    addr_hit[10] = (reg_addr == POWER_MANAGER_CORE_REG_X8_OFFSET);
    addr_hit[11] = (reg_addr == POWER_MANAGER_CORE_REG_X9_OFFSET);
    addr_hit[12] = (reg_addr == POWER_MANAGER_CORE_REG_X10_OFFSET);
    addr_hit[13] = (reg_addr == POWER_MANAGER_CORE_REG_X11_OFFSET);
    addr_hit[14] = (reg_addr == POWER_MANAGER_CORE_REG_X12_OFFSET);
    addr_hit[15] = (reg_addr == POWER_MANAGER_CORE_REG_X13_OFFSET);
    addr_hit[16] = (reg_addr == POWER_MANAGER_CORE_REG_X14_OFFSET);
    addr_hit[17] = (reg_addr == POWER_MANAGER_CORE_REG_X15_OFFSET);
    addr_hit[18] = (reg_addr == POWER_MANAGER_CORE_REG_X16_OFFSET);
    addr_hit[19] = (reg_addr == POWER_MANAGER_CORE_REG_X17_OFFSET);
    addr_hit[20] = (reg_addr == POWER_MANAGER_CORE_REG_X18_OFFSET);
    addr_hit[21] = (reg_addr == POWER_MANAGER_CORE_REG_X19_OFFSET);
    addr_hit[22] = (reg_addr == POWER_MANAGER_CORE_REG_X20_OFFSET);
    addr_hit[23] = (reg_addr == POWER_MANAGER_CORE_REG_X21_OFFSET);
    addr_hit[24] = (reg_addr == POWER_MANAGER_CORE_REG_X22_OFFSET);
    addr_hit[25] = (reg_addr == POWER_MANAGER_CORE_REG_X23_OFFSET);
    addr_hit[26] = (reg_addr == POWER_MANAGER_CORE_REG_X24_OFFSET);
    addr_hit[27] = (reg_addr == POWER_MANAGER_CORE_REG_X25_OFFSET);
    addr_hit[28] = (reg_addr == POWER_MANAGER_CORE_REG_X26_OFFSET);
    addr_hit[29] = (reg_addr == POWER_MANAGER_CORE_REG_X27_OFFSET);
    addr_hit[30] = (reg_addr == POWER_MANAGER_CORE_REG_X28_OFFSET);
    addr_hit[31] = (reg_addr == POWER_MANAGER_CORE_REG_X29_OFFSET);
    addr_hit[32] = (reg_addr == POWER_MANAGER_CORE_REG_X30_OFFSET);
    addr_hit[33] = (reg_addr == POWER_MANAGER_CORE_REG_X31_OFFSET);
    addr_hit[34] = (reg_addr == POWER_MANAGER_CORE_CSR_C0_OFFSET);
    addr_hit[35] = (reg_addr == POWER_MANAGER_CORE_CSR_C1_OFFSET);
    addr_hit[36] = (reg_addr == POWER_MANAGER_CORE_CSR_C2_OFFSET);
    addr_hit[37] = (reg_addr == POWER_MANAGER_CORE_CSR_C3_OFFSET);
    addr_hit[38] = (reg_addr == POWER_MANAGER_CORE_CSR_C4_OFFSET);
    addr_hit[39] = (reg_addr == POWER_MANAGER_CORE_CSR_C5_OFFSET);
    addr_hit[40] = (reg_addr == POWER_MANAGER_CORE_CSR_C6_OFFSET);
    addr_hit[41] = (reg_addr == POWER_MANAGER_CORE_CSR_C7_OFFSET);
    addr_hit[42] = (reg_addr == POWER_MANAGER_EN_WAIT_FOR_INTR_OFFSET);
    addr_hit[43] = (reg_addr == POWER_MANAGER_INTR_STATE_OFFSET);
    addr_hit[44] = (reg_addr == POWER_MANAGER_CPU_RESET_ASSERT_COUNTER_OFFSET);
    addr_hit[45] = (reg_addr == POWER_MANAGER_CPU_RESET_DEASSERT_COUNTER_OFFSET);
    addr_hit[46] = (reg_addr == POWER_MANAGER_CPU_SWITCH_OFF_COUNTER_OFFSET);
    addr_hit[47] = (reg_addr == POWER_MANAGER_CPU_SWITCH_ON_COUNTER_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(POWER_MANAGER_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(POWER_MANAGER_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(POWER_MANAGER_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(POWER_MANAGER_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(POWER_MANAGER_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(POWER_MANAGER_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(POWER_MANAGER_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(POWER_MANAGER_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(POWER_MANAGER_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(POWER_MANAGER_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(POWER_MANAGER_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(POWER_MANAGER_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(POWER_MANAGER_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(POWER_MANAGER_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(POWER_MANAGER_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(POWER_MANAGER_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(POWER_MANAGER_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(POWER_MANAGER_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(POWER_MANAGER_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(POWER_MANAGER_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(POWER_MANAGER_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(POWER_MANAGER_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(POWER_MANAGER_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(POWER_MANAGER_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(POWER_MANAGER_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(POWER_MANAGER_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(POWER_MANAGER_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(POWER_MANAGER_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(POWER_MANAGER_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(POWER_MANAGER_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(POWER_MANAGER_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(POWER_MANAGER_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(POWER_MANAGER_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(POWER_MANAGER_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(POWER_MANAGER_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(POWER_MANAGER_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(POWER_MANAGER_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(POWER_MANAGER_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(POWER_MANAGER_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(POWER_MANAGER_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(POWER_MANAGER_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(POWER_MANAGER_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(POWER_MANAGER_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(POWER_MANAGER_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(POWER_MANAGER_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(POWER_MANAGER_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(POWER_MANAGER_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(POWER_MANAGER_PERMIT[47] & ~reg_be)))));
  end

  assign power_gate_core_we = addr_hit[0] & reg_we & !reg_error;
  assign power_gate_core_wd = reg_wdata[0];

  assign wakeup_state_we = addr_hit[1] & reg_we & !reg_error;
  assign wakeup_state_wd = reg_wdata[0];

  assign restore_address_we = addr_hit[2] & reg_we & !reg_error;
  assign restore_address_wd = reg_wdata[31:0];

  assign core_reg_x1_we = addr_hit[3] & reg_we & !reg_error;
  assign core_reg_x1_wd = reg_wdata[31:0];

  assign core_reg_x2_we = addr_hit[4] & reg_we & !reg_error;
  assign core_reg_x2_wd = reg_wdata[31:0];

  assign core_reg_x3_we = addr_hit[5] & reg_we & !reg_error;
  assign core_reg_x3_wd = reg_wdata[31:0];

  assign core_reg_x4_we = addr_hit[6] & reg_we & !reg_error;
  assign core_reg_x4_wd = reg_wdata[31:0];

  assign core_reg_x5_we = addr_hit[7] & reg_we & !reg_error;
  assign core_reg_x5_wd = reg_wdata[31:0];

  assign core_reg_x6_we = addr_hit[8] & reg_we & !reg_error;
  assign core_reg_x6_wd = reg_wdata[31:0];

  assign core_reg_x7_we = addr_hit[9] & reg_we & !reg_error;
  assign core_reg_x7_wd = reg_wdata[31:0];

  assign core_reg_x8_we = addr_hit[10] & reg_we & !reg_error;
  assign core_reg_x8_wd = reg_wdata[31:0];

  assign core_reg_x9_we = addr_hit[11] & reg_we & !reg_error;
  assign core_reg_x9_wd = reg_wdata[31:0];

  assign core_reg_x10_we = addr_hit[12] & reg_we & !reg_error;
  assign core_reg_x10_wd = reg_wdata[31:0];

  assign core_reg_x11_we = addr_hit[13] & reg_we & !reg_error;
  assign core_reg_x11_wd = reg_wdata[31:0];

  assign core_reg_x12_we = addr_hit[14] & reg_we & !reg_error;
  assign core_reg_x12_wd = reg_wdata[31:0];

  assign core_reg_x13_we = addr_hit[15] & reg_we & !reg_error;
  assign core_reg_x13_wd = reg_wdata[31:0];

  assign core_reg_x14_we = addr_hit[16] & reg_we & !reg_error;
  assign core_reg_x14_wd = reg_wdata[31:0];

  assign core_reg_x15_we = addr_hit[17] & reg_we & !reg_error;
  assign core_reg_x15_wd = reg_wdata[31:0];

  assign core_reg_x16_we = addr_hit[18] & reg_we & !reg_error;
  assign core_reg_x16_wd = reg_wdata[31:0];

  assign core_reg_x17_we = addr_hit[19] & reg_we & !reg_error;
  assign core_reg_x17_wd = reg_wdata[31:0];

  assign core_reg_x18_we = addr_hit[20] & reg_we & !reg_error;
  assign core_reg_x18_wd = reg_wdata[31:0];

  assign core_reg_x19_we = addr_hit[21] & reg_we & !reg_error;
  assign core_reg_x19_wd = reg_wdata[31:0];

  assign core_reg_x20_we = addr_hit[22] & reg_we & !reg_error;
  assign core_reg_x20_wd = reg_wdata[31:0];

  assign core_reg_x21_we = addr_hit[23] & reg_we & !reg_error;
  assign core_reg_x21_wd = reg_wdata[31:0];

  assign core_reg_x22_we = addr_hit[24] & reg_we & !reg_error;
  assign core_reg_x22_wd = reg_wdata[31:0];

  assign core_reg_x23_we = addr_hit[25] & reg_we & !reg_error;
  assign core_reg_x23_wd = reg_wdata[31:0];

  assign core_reg_x24_we = addr_hit[26] & reg_we & !reg_error;
  assign core_reg_x24_wd = reg_wdata[31:0];

  assign core_reg_x25_we = addr_hit[27] & reg_we & !reg_error;
  assign core_reg_x25_wd = reg_wdata[31:0];

  assign core_reg_x26_we = addr_hit[28] & reg_we & !reg_error;
  assign core_reg_x26_wd = reg_wdata[31:0];

  assign core_reg_x27_we = addr_hit[29] & reg_we & !reg_error;
  assign core_reg_x27_wd = reg_wdata[31:0];

  assign core_reg_x28_we = addr_hit[30] & reg_we & !reg_error;
  assign core_reg_x28_wd = reg_wdata[31:0];

  assign core_reg_x29_we = addr_hit[31] & reg_we & !reg_error;
  assign core_reg_x29_wd = reg_wdata[31:0];

  assign core_reg_x30_we = addr_hit[32] & reg_we & !reg_error;
  assign core_reg_x30_wd = reg_wdata[31:0];

  assign core_reg_x31_we = addr_hit[33] & reg_we & !reg_error;
  assign core_reg_x31_wd = reg_wdata[31:0];

  assign core_csr_c0_we = addr_hit[34] & reg_we & !reg_error;
  assign core_csr_c0_wd = reg_wdata[31:0];

  assign core_csr_c1_we = addr_hit[35] & reg_we & !reg_error;
  assign core_csr_c1_wd = reg_wdata[31:0];

  assign core_csr_c2_we = addr_hit[36] & reg_we & !reg_error;
  assign core_csr_c2_wd = reg_wdata[31:0];

  assign core_csr_c3_we = addr_hit[37] & reg_we & !reg_error;
  assign core_csr_c3_wd = reg_wdata[31:0];

  assign core_csr_c4_we = addr_hit[38] & reg_we & !reg_error;
  assign core_csr_c4_wd = reg_wdata[31:0];

  assign core_csr_c5_we = addr_hit[39] & reg_we & !reg_error;
  assign core_csr_c5_wd = reg_wdata[31:0];

  assign core_csr_c6_we = addr_hit[40] & reg_we & !reg_error;
  assign core_csr_c6_wd = reg_wdata[31:0];

  assign core_csr_c7_we = addr_hit[41] & reg_we & !reg_error;
  assign core_csr_c7_wd = reg_wdata[31:0];

  assign en_wait_for_intr_we = addr_hit[42] & reg_we & !reg_error;
  assign en_wait_for_intr_wd = reg_wdata[0];

  assign intr_state_we = addr_hit[43] & reg_we & !reg_error;
  assign intr_state_wd = reg_wdata[0];

  assign cpu_reset_assert_counter_we = addr_hit[44] & reg_we & !reg_error;
  assign cpu_reset_assert_counter_wd = reg_wdata[31:0];

  assign cpu_reset_deassert_counter_we = addr_hit[45] & reg_we & !reg_error;
  assign cpu_reset_deassert_counter_wd = reg_wdata[31:0];

  assign cpu_switch_off_counter_we = addr_hit[46] & reg_we & !reg_error;
  assign cpu_switch_off_counter_wd = reg_wdata[31:0];

  assign cpu_switch_on_counter_we = addr_hit[47] & reg_we & !reg_error;
  assign cpu_switch_on_counter_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = power_gate_core_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = wakeup_state_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = restore_address_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = core_reg_x1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = core_reg_x2_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = core_reg_x3_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = core_reg_x4_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = core_reg_x5_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = core_reg_x6_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = core_reg_x7_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = core_reg_x8_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = core_reg_x9_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = core_reg_x10_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = core_reg_x11_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = core_reg_x12_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = core_reg_x13_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = core_reg_x14_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = core_reg_x15_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = core_reg_x16_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = core_reg_x17_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = core_reg_x18_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = core_reg_x19_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = core_reg_x20_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = core_reg_x21_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = core_reg_x22_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = core_reg_x23_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = core_reg_x24_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = core_reg_x25_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = core_reg_x26_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = core_reg_x27_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = core_reg_x28_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = core_reg_x29_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = core_reg_x30_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = core_reg_x31_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = core_csr_c0_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = core_csr_c1_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = core_csr_c2_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = core_csr_c3_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = core_csr_c4_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = core_csr_c5_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = core_csr_c6_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = core_csr_c7_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = en_wait_for_intr_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[0] = intr_state_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = cpu_reset_assert_counter_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = cpu_reset_deassert_counter_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = cpu_switch_off_counter_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = cpu_switch_on_counter_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
