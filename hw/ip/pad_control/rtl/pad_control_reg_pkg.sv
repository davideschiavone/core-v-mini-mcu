// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pad_control_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [3:0] q;} pad_control_reg2hw_pad_mux_exit_valid_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_clk_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_rst_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_boot_select_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_execute_from_flash_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_jtag_tck_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_jtag_tms_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_jtag_trst_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_jtag_tdi_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_jtag_tdo_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_uart_rx_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_uart_tx_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_exit_valid_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_0_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_1_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_2_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_3_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_4_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_5_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_6_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_7_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_8_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_9_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_10_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_11_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_12_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_13_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_14_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_15_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_16_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_17_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_18_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_19_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_20_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_21_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_22_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_23_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_24_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_25_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_26_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_27_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_28_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_29_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_30_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_gpio_31_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_flash_sck_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_flash_cs_0_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_flash_cs_1_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_flash_sd_0_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_flash_sd_1_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_flash_sd_2_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_flash_sd_3_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_sck_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_cs_0_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_cs_1_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_sd_0_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_sd_1_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_sd_2_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_spi_sd_3_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_i2c_scl_reg_t;

  typedef struct packed {logic [7:0] q;} pad_control_reg2hw_pad_attribute_i2c_sda_reg_t;

  // Register -> HW type
  typedef struct packed {
    pad_control_reg2hw_pad_mux_exit_valid_reg_t pad_mux_exit_valid;  // [483:480]
    pad_control_reg2hw_pad_attribute_clk_reg_t pad_attribute_clk;  // [479:472]
    pad_control_reg2hw_pad_attribute_rst_reg_t pad_attribute_rst;  // [471:464]
    pad_control_reg2hw_pad_attribute_boot_select_reg_t pad_attribute_boot_select;  // [463:456]
    pad_control_reg2hw_pad_attribute_execute_from_flash_reg_t pad_attribute_execute_from_flash; // [455:448]
    pad_control_reg2hw_pad_attribute_jtag_tck_reg_t pad_attribute_jtag_tck;  // [447:440]
    pad_control_reg2hw_pad_attribute_jtag_tms_reg_t pad_attribute_jtag_tms;  // [439:432]
    pad_control_reg2hw_pad_attribute_jtag_trst_reg_t pad_attribute_jtag_trst;  // [431:424]
    pad_control_reg2hw_pad_attribute_jtag_tdi_reg_t pad_attribute_jtag_tdi;  // [423:416]
    pad_control_reg2hw_pad_attribute_jtag_tdo_reg_t pad_attribute_jtag_tdo;  // [415:408]
    pad_control_reg2hw_pad_attribute_uart_rx_reg_t pad_attribute_uart_rx;  // [407:400]
    pad_control_reg2hw_pad_attribute_uart_tx_reg_t pad_attribute_uart_tx;  // [399:392]
    pad_control_reg2hw_pad_attribute_exit_valid_reg_t pad_attribute_exit_valid;  // [391:384]
    pad_control_reg2hw_pad_attribute_gpio_0_reg_t pad_attribute_gpio_0;  // [383:376]
    pad_control_reg2hw_pad_attribute_gpio_1_reg_t pad_attribute_gpio_1;  // [375:368]
    pad_control_reg2hw_pad_attribute_gpio_2_reg_t pad_attribute_gpio_2;  // [367:360]
    pad_control_reg2hw_pad_attribute_gpio_3_reg_t pad_attribute_gpio_3;  // [359:352]
    pad_control_reg2hw_pad_attribute_gpio_4_reg_t pad_attribute_gpio_4;  // [351:344]
    pad_control_reg2hw_pad_attribute_gpio_5_reg_t pad_attribute_gpio_5;  // [343:336]
    pad_control_reg2hw_pad_attribute_gpio_6_reg_t pad_attribute_gpio_6;  // [335:328]
    pad_control_reg2hw_pad_attribute_gpio_7_reg_t pad_attribute_gpio_7;  // [327:320]
    pad_control_reg2hw_pad_attribute_gpio_8_reg_t pad_attribute_gpio_8;  // [319:312]
    pad_control_reg2hw_pad_attribute_gpio_9_reg_t pad_attribute_gpio_9;  // [311:304]
    pad_control_reg2hw_pad_attribute_gpio_10_reg_t pad_attribute_gpio_10;  // [303:296]
    pad_control_reg2hw_pad_attribute_gpio_11_reg_t pad_attribute_gpio_11;  // [295:288]
    pad_control_reg2hw_pad_attribute_gpio_12_reg_t pad_attribute_gpio_12;  // [287:280]
    pad_control_reg2hw_pad_attribute_gpio_13_reg_t pad_attribute_gpio_13;  // [279:272]
    pad_control_reg2hw_pad_attribute_gpio_14_reg_t pad_attribute_gpio_14;  // [271:264]
    pad_control_reg2hw_pad_attribute_gpio_15_reg_t pad_attribute_gpio_15;  // [263:256]
    pad_control_reg2hw_pad_attribute_gpio_16_reg_t pad_attribute_gpio_16;  // [255:248]
    pad_control_reg2hw_pad_attribute_gpio_17_reg_t pad_attribute_gpio_17;  // [247:240]
    pad_control_reg2hw_pad_attribute_gpio_18_reg_t pad_attribute_gpio_18;  // [239:232]
    pad_control_reg2hw_pad_attribute_gpio_19_reg_t pad_attribute_gpio_19;  // [231:224]
    pad_control_reg2hw_pad_attribute_gpio_20_reg_t pad_attribute_gpio_20;  // [223:216]
    pad_control_reg2hw_pad_attribute_gpio_21_reg_t pad_attribute_gpio_21;  // [215:208]
    pad_control_reg2hw_pad_attribute_gpio_22_reg_t pad_attribute_gpio_22;  // [207:200]
    pad_control_reg2hw_pad_attribute_gpio_23_reg_t pad_attribute_gpio_23;  // [199:192]
    pad_control_reg2hw_pad_attribute_gpio_24_reg_t pad_attribute_gpio_24;  // [191:184]
    pad_control_reg2hw_pad_attribute_gpio_25_reg_t pad_attribute_gpio_25;  // [183:176]
    pad_control_reg2hw_pad_attribute_gpio_26_reg_t pad_attribute_gpio_26;  // [175:168]
    pad_control_reg2hw_pad_attribute_gpio_27_reg_t pad_attribute_gpio_27;  // [167:160]
    pad_control_reg2hw_pad_attribute_gpio_28_reg_t pad_attribute_gpio_28;  // [159:152]
    pad_control_reg2hw_pad_attribute_gpio_29_reg_t pad_attribute_gpio_29;  // [151:144]
    pad_control_reg2hw_pad_attribute_gpio_30_reg_t pad_attribute_gpio_30;  // [143:136]
    pad_control_reg2hw_pad_attribute_gpio_31_reg_t pad_attribute_gpio_31;  // [135:128]
    pad_control_reg2hw_pad_attribute_spi_flash_sck_reg_t pad_attribute_spi_flash_sck;  // [127:120]
    pad_control_reg2hw_pad_attribute_spi_flash_cs_0_reg_t pad_attribute_spi_flash_cs_0; // [119:112]
    pad_control_reg2hw_pad_attribute_spi_flash_cs_1_reg_t pad_attribute_spi_flash_cs_1; // [111:104]
    pad_control_reg2hw_pad_attribute_spi_flash_sd_0_reg_t pad_attribute_spi_flash_sd_0;  // [103:96]
    pad_control_reg2hw_pad_attribute_spi_flash_sd_1_reg_t pad_attribute_spi_flash_sd_1;  // [95:88]
    pad_control_reg2hw_pad_attribute_spi_flash_sd_2_reg_t pad_attribute_spi_flash_sd_2;  // [87:80]
    pad_control_reg2hw_pad_attribute_spi_flash_sd_3_reg_t pad_attribute_spi_flash_sd_3;  // [79:72]
    pad_control_reg2hw_pad_attribute_spi_sck_reg_t pad_attribute_spi_sck;  // [71:64]
    pad_control_reg2hw_pad_attribute_spi_cs_0_reg_t pad_attribute_spi_cs_0;  // [63:56]
    pad_control_reg2hw_pad_attribute_spi_cs_1_reg_t pad_attribute_spi_cs_1;  // [55:48]
    pad_control_reg2hw_pad_attribute_spi_sd_0_reg_t pad_attribute_spi_sd_0;  // [47:40]
    pad_control_reg2hw_pad_attribute_spi_sd_1_reg_t pad_attribute_spi_sd_1;  // [39:32]
    pad_control_reg2hw_pad_attribute_spi_sd_2_reg_t pad_attribute_spi_sd_2;  // [31:24]
    pad_control_reg2hw_pad_attribute_spi_sd_3_reg_t pad_attribute_spi_sd_3;  // [23:16]
    pad_control_reg2hw_pad_attribute_i2c_scl_reg_t pad_attribute_i2c_scl;  // [15:8]
    pad_control_reg2hw_pad_attribute_i2c_sda_reg_t pad_attribute_i2c_sda;  // [7:0]
  } pad_control_reg2hw_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_MUX_EXIT_VALID_OFFSET = 8'h0;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_CLK_OFFSET = 8'h4;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_RST_OFFSET = 8'h8;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_BOOT_SELECT_OFFSET = 8'hc;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_EXECUTE_FROM_FLASH_OFFSET = 8'h10;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TCK_OFFSET = 8'h14;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TMS_OFFSET = 8'h18;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TRST_OFFSET = 8'h1c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDI_OFFSET = 8'h20;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDO_OFFSET = 8'h24;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_UART_RX_OFFSET = 8'h28;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_UART_TX_OFFSET = 8'h2c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_EXIT_VALID_OFFSET = 8'h30;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_0_OFFSET = 8'h34;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_1_OFFSET = 8'h38;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_2_OFFSET = 8'h3c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_3_OFFSET = 8'h40;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_4_OFFSET = 8'h44;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_5_OFFSET = 8'h48;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_6_OFFSET = 8'h4c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_7_OFFSET = 8'h50;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_8_OFFSET = 8'h54;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_9_OFFSET = 8'h58;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_10_OFFSET = 8'h5c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_11_OFFSET = 8'h60;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_12_OFFSET = 8'h64;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_13_OFFSET = 8'h68;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_14_OFFSET = 8'h6c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_15_OFFSET = 8'h70;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_16_OFFSET = 8'h74;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_17_OFFSET = 8'h78;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_18_OFFSET = 8'h7c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_19_OFFSET = 8'h80;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_20_OFFSET = 8'h84;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_21_OFFSET = 8'h88;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_22_OFFSET = 8'h8c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_23_OFFSET = 8'h90;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_24_OFFSET = 8'h94;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_25_OFFSET = 8'h98;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_26_OFFSET = 8'h9c;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_27_OFFSET = 8'ha0;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_28_OFFSET = 8'ha4;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_29_OFFSET = 8'ha8;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_30_OFFSET = 8'hac;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_31_OFFSET = 8'hb0;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SCK_OFFSET = 8'hb4;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_0_OFFSET = 8'hb8;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_1_OFFSET = 8'hbc;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_0_OFFSET = 8'hc0;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_1_OFFSET = 8'hc4;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_2_OFFSET = 8'hc8;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_3_OFFSET = 8'hcc;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SCK_OFFSET = 8'hd0;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_CS_0_OFFSET = 8'hd4;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_CS_1_OFFSET = 8'hd8;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_0_OFFSET = 8'hdc;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_1_OFFSET = 8'he0;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_2_OFFSET = 8'he4;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_3_OFFSET = 8'he8;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_I2C_SCL_OFFSET = 8'hec;
  parameter logic [BlockAw-1:0] PAD_CONTROL_PAD_ATTRIBUTE_I2C_SDA_OFFSET = 8'hf0;

  // Register index
  typedef enum int {
    PAD_CONTROL_PAD_MUX_EXIT_VALID,
    PAD_CONTROL_PAD_ATTRIBUTE_CLK,
    PAD_CONTROL_PAD_ATTRIBUTE_RST,
    PAD_CONTROL_PAD_ATTRIBUTE_BOOT_SELECT,
    PAD_CONTROL_PAD_ATTRIBUTE_EXECUTE_FROM_FLASH,
    PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TCK,
    PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TMS,
    PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TRST,
    PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDI,
    PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDO,
    PAD_CONTROL_PAD_ATTRIBUTE_UART_RX,
    PAD_CONTROL_PAD_ATTRIBUTE_UART_TX,
    PAD_CONTROL_PAD_ATTRIBUTE_EXIT_VALID,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_0,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_1,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_2,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_3,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_4,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_5,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_6,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_7,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_8,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_9,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_10,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_11,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_12,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_13,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_14,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_15,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_16,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_17,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_18,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_19,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_20,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_21,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_22,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_23,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_24,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_25,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_26,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_27,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_28,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_29,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_30,
    PAD_CONTROL_PAD_ATTRIBUTE_GPIO_31,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SCK,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_0,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_1,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_0,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_1,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_2,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_3,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_SCK,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_CS_0,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_CS_1,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_0,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_1,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_2,
    PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_3,
    PAD_CONTROL_PAD_ATTRIBUTE_I2C_SCL,
    PAD_CONTROL_PAD_ATTRIBUTE_I2C_SDA
  } pad_control_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PAD_CONTROL_PERMIT[61] = '{
      4'b0001,  // index[ 0] PAD_CONTROL_PAD_MUX_EXIT_VALID
      4'b0001,  // index[ 1] PAD_CONTROL_PAD_ATTRIBUTE_CLK
      4'b0001,  // index[ 2] PAD_CONTROL_PAD_ATTRIBUTE_RST
      4'b0001,  // index[ 3] PAD_CONTROL_PAD_ATTRIBUTE_BOOT_SELECT
      4'b0001,  // index[ 4] PAD_CONTROL_PAD_ATTRIBUTE_EXECUTE_FROM_FLASH
      4'b0001,  // index[ 5] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TCK
      4'b0001,  // index[ 6] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TMS
      4'b0001,  // index[ 7] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TRST
      4'b0001,  // index[ 8] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDI
      4'b0001,  // index[ 9] PAD_CONTROL_PAD_ATTRIBUTE_JTAG_TDO
      4'b0001,  // index[10] PAD_CONTROL_PAD_ATTRIBUTE_UART_RX
      4'b0001,  // index[11] PAD_CONTROL_PAD_ATTRIBUTE_UART_TX
      4'b0001,  // index[12] PAD_CONTROL_PAD_ATTRIBUTE_EXIT_VALID
      4'b0001,  // index[13] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_0
      4'b0001,  // index[14] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_1
      4'b0001,  // index[15] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_2
      4'b0001,  // index[16] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_3
      4'b0001,  // index[17] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_4
      4'b0001,  // index[18] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_5
      4'b0001,  // index[19] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_6
      4'b0001,  // index[20] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_7
      4'b0001,  // index[21] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_8
      4'b0001,  // index[22] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_9
      4'b0001,  // index[23] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_10
      4'b0001,  // index[24] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_11
      4'b0001,  // index[25] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_12
      4'b0001,  // index[26] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_13
      4'b0001,  // index[27] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_14
      4'b0001,  // index[28] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_15
      4'b0001,  // index[29] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_16
      4'b0001,  // index[30] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_17
      4'b0001,  // index[31] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_18
      4'b0001,  // index[32] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_19
      4'b0001,  // index[33] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_20
      4'b0001,  // index[34] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_21
      4'b0001,  // index[35] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_22
      4'b0001,  // index[36] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_23
      4'b0001,  // index[37] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_24
      4'b0001,  // index[38] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_25
      4'b0001,  // index[39] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_26
      4'b0001,  // index[40] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_27
      4'b0001,  // index[41] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_28
      4'b0001,  // index[42] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_29
      4'b0001,  // index[43] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_30
      4'b0001,  // index[44] PAD_CONTROL_PAD_ATTRIBUTE_GPIO_31
      4'b0001,  // index[45] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SCK
      4'b0001,  // index[46] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_0
      4'b0001,  // index[47] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_CS_1
      4'b0001,  // index[48] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_0
      4'b0001,  // index[49] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_1
      4'b0001,  // index[50] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_2
      4'b0001,  // index[51] PAD_CONTROL_PAD_ATTRIBUTE_SPI_FLASH_SD_3
      4'b0001,  // index[52] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SCK
      4'b0001,  // index[53] PAD_CONTROL_PAD_ATTRIBUTE_SPI_CS_0
      4'b0001,  // index[54] PAD_CONTROL_PAD_ATTRIBUTE_SPI_CS_1
      4'b0001,  // index[55] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_0
      4'b0001,  // index[56] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_1
      4'b0001,  // index[57] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_2
      4'b0001,  // index[58] PAD_CONTROL_PAD_ATTRIBUTE_SPI_SD_3
      4'b0001,  // index[59] PAD_CONTROL_PAD_ATTRIBUTE_I2C_SCL
      4'b0001  // index[60] PAD_CONTROL_PAD_ATTRIBUTE_I2C_SDA
  };

endpackage

