// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package i2s_reg_pkg;

  // Param list
  parameter int BytePerSampleWidth = 2;
  parameter int ClkDivSize = 16;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [15:0] q;
  } i2s_reg2hw_clkdividx_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } i2s_reg2hw_bytepersample_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } en;
    struct packed {
      logic        q;
    } gen_clk_ws;
    struct packed {
      logic        q;
    } lsb_first;
    struct packed {
      logic        q;
    } flush_fifo;
    struct packed {
      logic [7:0]  q;
    } reachcount;
  } i2s_reg2hw_cfg_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } clear_fifo;
    struct packed {
      logic        q;
    } clear_overflow;
  } i2s_reg2hw_control_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } empty;
    struct packed {
      logic        q;
    } full;
    struct packed {
      logic        q;
    } overflow;
    struct packed {
      logic [7:0]  q;
    } fill_level;
  } i2s_reg2hw_status_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } clear_fifo;
    struct packed {
      logic        d;
      logic        de;
    } clear_overflow;
  } i2s_hw2reg_control_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } empty;
    struct packed {
      logic        d;
      logic        de;
    } full;
    struct packed {
      logic        d;
      logic        de;
    } overflow;
    struct packed {
      logic [7:0]  d;
      logic        de;
    } fill_level;
  } i2s_hw2reg_status_reg_t;

  // Register -> HW type
  typedef struct packed {
    i2s_reg2hw_clkdividx_reg_t clkdividx; // [42:27]
    i2s_reg2hw_bytepersample_reg_t bytepersample; // [26:25]
    i2s_reg2hw_cfg_reg_t cfg; // [24:13]
    i2s_reg2hw_control_reg_t control; // [12:11]
    i2s_reg2hw_status_reg_t status; // [10:0]
  } i2s_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    i2s_hw2reg_control_reg_t control; // [18:15]
    i2s_hw2reg_status_reg_t status; // [14:0]
  } i2s_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] I2S_CLKDIVIDX_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] I2S_BYTEPERSAMPLE_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] I2S_CFG_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] I2S_CONTROL_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] I2S_STATUS_OFFSET = 5'h 10;

  // Window parameters
  parameter logic [BlockAw-1:0] I2S_RXDATA_OFFSET = 5'h 14;
  parameter int unsigned        I2S_RXDATA_SIZE   = 'h 4;

  // Register index
  typedef enum int {
    I2S_CLKDIVIDX,
    I2S_BYTEPERSAMPLE,
    I2S_CFG,
    I2S_CONTROL,
    I2S_STATUS
  } i2s_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] I2S_PERMIT [5] = '{
    4'b 0011, // index[0] I2S_CLKDIVIDX
    4'b 0001, // index[1] I2S_BYTEPERSAMPLE
    4'b 0111, // index[2] I2S_CFG
    4'b 0001, // index[3] I2S_CONTROL
    4'b 0011  // index[4] I2S_STATUS
  };

endpackage

