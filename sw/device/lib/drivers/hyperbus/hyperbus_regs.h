// Generated register defines for hyperbus

// Copyright information found in source file:
// Copyright EPFL contributors.

// Licensing information found in source file:
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#ifndef _HYPERBUS_REG_DEFS_
#define _HYPERBUS_REG_DEFS_

#ifdef __cplusplus
extern "C" {
#endif
// Register width
#define HYPERBUS_PARAM_REG_WIDTH 32

// T_LATENCY_ACCESS register
#define HYPERBUS_T_LATENCY_ACCESS_REG_OFFSET 0x0
#define HYPERBUS_T_LATENCY_ACCESS_T_LATENCY_ACCESS_MASK 0xf
#define HYPERBUS_T_LATENCY_ACCESS_T_LATENCY_ACCESS_OFFSET 0
#define HYPERBUS_T_LATENCY_ACCESS_T_LATENCY_ACCESS_FIELD \
  ((bitfield_field32_t) { .mask = HYPERBUS_T_LATENCY_ACCESS_T_LATENCY_ACCESS_MASK, .index = HYPERBUS_T_LATENCY_ACCESS_T_LATENCY_ACCESS_OFFSET })

// EN_LATENCY_ADDITIONAL register
#define HYPERBUS_EN_LATENCY_ADDITIONAL_REG_OFFSET 0x4
#define HYPERBUS_EN_LATENCY_ADDITIONAL_EN_LATENCY_ADDITIONAL_BIT 0

// T_BURST_MAX register
#define HYPERBUS_T_BURST_MAX_REG_OFFSET 0x8
#define HYPERBUS_T_BURST_MAX_T_BURST_MAX_MASK 0xffff
#define HYPERBUS_T_BURST_MAX_T_BURST_MAX_OFFSET 0
#define HYPERBUS_T_BURST_MAX_T_BURST_MAX_FIELD \
  ((bitfield_field32_t) { .mask = HYPERBUS_T_BURST_MAX_T_BURST_MAX_MASK, .index = HYPERBUS_T_BURST_MAX_T_BURST_MAX_OFFSET })

// T_READ_WRITE_RECOVERY register
#define HYPERBUS_T_READ_WRITE_RECOVERY_REG_OFFSET 0xc
#define HYPERBUS_T_READ_WRITE_RECOVERY_T_READ_WRITE_RECOVERY_MASK 0xf
#define HYPERBUS_T_READ_WRITE_RECOVERY_T_READ_WRITE_RECOVERY_OFFSET 0
#define HYPERBUS_T_READ_WRITE_RECOVERY_T_READ_WRITE_RECOVERY_FIELD \
  ((bitfield_field32_t) { .mask = HYPERBUS_T_READ_WRITE_RECOVERY_T_READ_WRITE_RECOVERY_MASK, .index = HYPERBUS_T_READ_WRITE_RECOVERY_T_READ_WRITE_RECOVERY_OFFSET })

// T_RX_CLK_DELAY register
#define HYPERBUS_T_RX_CLK_DELAY_REG_OFFSET 0x10
#define HYPERBUS_T_RX_CLK_DELAY_T_RX_CLK_DELAY_MASK 0xf
#define HYPERBUS_T_RX_CLK_DELAY_T_RX_CLK_DELAY_OFFSET 0
#define HYPERBUS_T_RX_CLK_DELAY_T_RX_CLK_DELAY_FIELD \
  ((bitfield_field32_t) { .mask = HYPERBUS_T_RX_CLK_DELAY_T_RX_CLK_DELAY_MASK, .index = HYPERBUS_T_RX_CLK_DELAY_T_RX_CLK_DELAY_OFFSET })

// T_TX_CLK_DELAY register
#define HYPERBUS_T_TX_CLK_DELAY_REG_OFFSET 0x14
#define HYPERBUS_T_TX_CLK_DELAY_T_TX_CLK_DELAY_MASK 0xf
#define HYPERBUS_T_TX_CLK_DELAY_T_TX_CLK_DELAY_OFFSET 0
#define HYPERBUS_T_TX_CLK_DELAY_T_TX_CLK_DELAY_FIELD \
  ((bitfield_field32_t) { .mask = HYPERBUS_T_TX_CLK_DELAY_T_TX_CLK_DELAY_MASK, .index = HYPERBUS_T_TX_CLK_DELAY_T_TX_CLK_DELAY_OFFSET })

// ADDRESS_MASK_MSB register
#define HYPERBUS_ADDRESS_MASK_MSB_REG_OFFSET 0x18
#define HYPERBUS_ADDRESS_MASK_MSB_ADDRESS_MASK_MSB_MASK 0x1f
#define HYPERBUS_ADDRESS_MASK_MSB_ADDRESS_MASK_MSB_OFFSET 0
#define HYPERBUS_ADDRESS_MASK_MSB_ADDRESS_MASK_MSB_FIELD \
  ((bitfield_field32_t) { .mask = HYPERBUS_ADDRESS_MASK_MSB_ADDRESS_MASK_MSB_MASK, .index = HYPERBUS_ADDRESS_MASK_MSB_ADDRESS_MASK_MSB_OFFSET })

// ADDRESS_SPACE register
#define HYPERBUS_ADDRESS_SPACE_REG_OFFSET 0x1c
#define HYPERBUS_ADDRESS_SPACE_ADDRESS_SPACE_BIT 0

// PHYS_IN_USE register
#define HYPERBUS_PHYS_IN_USE_REG_OFFSET 0x20
#define HYPERBUS_PHYS_IN_USE_PHYS_IN_USE_BIT 0

// WHICH_PHY register
#define HYPERBUS_WHICH_PHY_REG_OFFSET 0x24
#define HYPERBUS_WHICH_PHY_WHICH_PHY_BIT 0

// T_CSH_CYCLE register
#define HYPERBUS_T_CSH_CYCLE_REG_OFFSET 0x28
#define HYPERBUS_T_CSH_CYCLE_T_CSH_CYCLE_MASK 0xf
#define HYPERBUS_T_CSH_CYCLE_T_CSH_CYCLE_OFFSET 0
#define HYPERBUS_T_CSH_CYCLE_T_CSH_CYCLE_FIELD \
  ((bitfield_field32_t) { .mask = HYPERBUS_T_CSH_CYCLE_T_CSH_CYCLE_MASK, .index = HYPERBUS_T_CSH_CYCLE_T_CSH_CYCLE_OFFSET })

#ifdef __cplusplus
}  // extern "C"
#endif
#endif  // _HYPERBUS_REG_DEFS_
// End generated register defines for hyperbus